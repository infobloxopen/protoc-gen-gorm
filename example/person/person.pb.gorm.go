package person

import (
	context "context"
	auth "github.com/sbhagate-infoblox/atlas-app-toolkit-1.4.0/auth"
	errors "github.com/sbhagate-infoblox/protoc-gen-gorm/errors"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	gorm "gorm.io/gorm"
)

type PersonORM struct {
	AccountID     string
	CompartmentID string
	PersonId      int64
	PersonName    string
}

// TableName overrides the default tablename generated by GORM
func (PersonORM) TableName() string {
	return "people"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Person) ToORM(ctx context.Context) (PersonORM, error) {
	to := PersonORM{}
	var err error
	if prehook, ok := interface{}(m).(PersonWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.PersonId = m.PersonId
	to.PersonName = m.PersonName
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return to, err
	}
	to.AccountID = accountID
	compartmentID, err := auth.GetCompartmentID(ctx, nil)
	if err != nil {
		return to, err
	}
	to.CompartmentID = compartmentID
	if posthook, ok := interface{}(m).(PersonWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *PersonORM) ToPB(ctx context.Context) (Person, error) {
	to := Person{}
	var err error
	if prehook, ok := interface{}(m).(PersonWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.PersonId = m.PersonId
	to.PersonName = m.PersonName
	if posthook, ok := interface{}(m).(PersonWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Person the arg will be the target, the caller the one being converted from

// PersonBeforeToORM called before default ToORM code
type PersonWithBeforeToORM interface {
	BeforeToORM(context.Context, *PersonORM) error
}

// PersonAfterToORM called after default ToORM code
type PersonWithAfterToORM interface {
	AfterToORM(context.Context, *PersonORM) error
}

// PersonBeforeToPB called before default ToPB code
type PersonWithBeforeToPB interface {
	BeforeToPB(context.Context, *Person) error
}

// PersonAfterToPB called after default ToPB code
type PersonWithAfterToPB interface {
	AfterToPB(context.Context, *Person) error
}

// DefaultCreatePerson executes a basic gorm create call
func DefaultCreatePerson(ctx context.Context, in *Person, db *gorm.DB) (*Person, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PersonORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PersonORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type PersonORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PersonORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskPerson patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskPerson(ctx context.Context, patchee *Person, patcher *Person, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Person, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"PersonId" {
			patchee.PersonId = patcher.PersonId
			continue
		}
		if f == prefix+"PersonName" {
			patchee.PersonName = patcher.PersonName
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListPerson executes a gorm list call
func DefaultListPerson(ctx context.Context, db *gorm.DB) ([]*Person, error) {
	in := Person{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PersonORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(PersonORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []PersonORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(PersonORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Person{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type PersonORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PersonORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type PersonORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]PersonORM) error
}
