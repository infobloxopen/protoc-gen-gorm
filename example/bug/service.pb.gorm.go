// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example/bug/service.proto

/*
Package bug is a generated protocol buffer package.

It is generated from these files:
	example/bug/service.proto

It has these top-level messages:
	AclItem
	Acl
*/
package bug

import (
	context "context"
	errors "errors"

	gorm "github.com/jinzhu/gorm"

	"github.com/Infoblox-CTO/ngp.api.toolkit/mw/auth"
	ops "github.com/Infoblox-CTO/ngp.api.toolkit/op/gorm"
	proto "github.com/gogo/protobuf/proto"

	fmt "fmt"

	math "math"

	_ "github.com/infobloxopen/protoc-gen-gorm/options"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ACLItemORM no comment was provided for message type
type ACLItemORM struct {
	ID uint64
}

// TableName overrides the default tablename generated by GORM
func (ACLItemORM) TableName() string {
	return "acl_items"
}

// ConvertACLItemToORM takes a pb object and returns an orm object
func ConvertACLItemToORM(from AclItem) (ACLItemORM, error) {
	to := ACLItemORM{}
	var err error
	to.ID = from.Id
	return to, err
}

// ConvertACLItemFromORM takes an orm object and returns a pb object
func ConvertACLItemFromORM(from ACLItemORM) (AclItem, error) {
	to := AclItem{}
	var err error
	to.Id = from.ID
	return to, err
}

// ACLORM no comment was provided for message type
type ACLORM struct {
	TenantID string
	ID       uint64
	ACLItems []*AclItemORM `gorm:"foreignkey:ACLID"`
}

// TableName overrides the default tablename generated by GORM
func (ACLORM) TableName() string {
	return "acls"
}

// ConvertACLToORM takes a pb object and returns an orm object
func ConvertACLToORM(from Acl) (ACLORM, error) {
	to := ACLORM{}
	var err error
	to.ID = from.Id
	for _, v := range from.AclItems {
		if v != nil {
			if tempACLItems, cErr := ConvertACLItemToORM(*v); cErr == nil {
				to.ACLItems = append(to.ACLItems, &tempACLItems)
			} else {
				return to, cErr
			}
		} else {
			to.ACLItems = append(to.ACLItems, nil)
		}
	}
	return to, err
}

// ConvertACLFromORM takes an orm object and returns a pb object
func ConvertACLFromORM(from ACLORM) (Acl, error) {
	to := Acl{}
	var err error
	to.Id = from.ID
	for _, v := range from.ACLItems {
		if v != nil {
			if tempACLItems, cErr := ConvertACLItemFromORM(*v); cErr == nil {
				to.AclItems = append(to.AclItems, &tempACLItems)
			} else {
				return to, cErr
			}
		} else {
			to.AclItems = append(to.AclItems, nil)
		}
	}
	return to, err
}

////////////////////////// CURDL for objects
// DefaultCreateACLItem executes a basic gorm create call
func DefaultCreateACLItem(ctx context.Context, in *AclItem, db *gorm.DB) (*AclItem, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateACLItem")
	}
	ormObj, err := ConvertACLItemToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertACLItemFromORM(ormObj)
	return &pbResponse, err
}

// DefaultReadACLItem executes a basic gorm read call
func DefaultReadACLItem(ctx context.Context, in *AclItem, db *gorm.DB) (*AclItem, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadACLItem")
	}
	ormParams, err := ConvertACLItemToORM(*in)
	if err != nil {
		return nil, err
	}
	ormResponse := ACLItemORM{}
	if err = db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertACLItemFromORM(ormResponse)
	return &pbResponse, err
}

// DefaultUpdateACLItem executes a basic gorm update call
func DefaultUpdateACLItem(ctx context.Context, in *AclItem, db *gorm.DB) (*AclItem, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultUpdateACLItem")
	}
	ormObj, err := ConvertACLItemToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertACLItemFromORM(ormObj)
	return &pbResponse, err
}

func DefaultDeleteACLItem(ctx context.Context, in *AclItem, db *gorm.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteACLItem")
	}
	ormObj, err := ConvertACLItemToORM(*in)
	if err != nil {
		return err
	}
	err = db.Where(&ormObj).Delete(&ACLItemORM{}).Error
	return err
}

// DefaultListACLItem executes a gorm list call
func DefaultListACLItem(ctx context.Context, db *gorm.DB) ([]*AclItem, error) {
	ormResponse := []ACLItemORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*AclItem{}
	for _, responseEntry := range ormResponse {
		temp, err := ConvertACLItemFromORM(responseEntry)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultStrictUpdateACLItem clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateACLItem(ctx context.Context, in *AclItem, db *gorm.DB) (*AclItem, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCascadedUpdateACLItem")
	}
	ormObj, err := ConvertACLItemToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertACLItemFromORM(ormObj)
	if err != nil {
		return nil, err
	}
	return &pbResponse, nil
}

// DefaultCreateACL executes a basic gorm create call
func DefaultCreateACL(ctx context.Context, in *Acl, db *gorm.DB) (*Acl, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateACL")
	}
	ormObj, err := ConvertACLToORM(*in)
	if err != nil {
		return nil, err
	}
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	ormObj.TenantID = tenantID
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertACLFromORM(ormObj)
	return &pbResponse, err
}

// DefaultReadACL executes a basic gorm read call
func DefaultReadACL(ctx context.Context, in *Acl, db *gorm.DB) (*Acl, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadACL")
	}
	ormParams, err := ConvertACLToORM(*in)
	if err != nil {
		return nil, err
	}
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	ormParams.TenantID = tenantID
	ormResponse := ACLORM{}
	if err = db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertACLFromORM(ormResponse)
	return &pbResponse, err
}

// DefaultUpdateACL executes a basic gorm update call
func DefaultUpdateACL(ctx context.Context, in *Acl, db *gorm.DB) (*Acl, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultUpdateACL")
	}
	if exists, err := DefaultReadACL(ctx, &ACL{Id: in.GetId()}, db); err != nil {
		return nil, err
	} else if exists == nil {
		return nil, errors.New("ACL not found")
	}
	ormObj, err := ConvertACLToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertACLFromORM(ormObj)
	return &pbResponse, err
}

func DefaultDeleteACL(ctx context.Context, in *Acl, db *gorm.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteACL")
	}
	ormObj, err := ConvertACLToORM(*in)
	if err != nil {
		return err
	}
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return tIDErr
	}
	ormObj.TenantID = tenantID
	err = db.Where(&ormObj).Delete(&ACLORM{}).Error
	return err
}

// DefaultListACL executes a gorm list call
func DefaultListACL(ctx context.Context, db *gorm.DB) ([]*Acl, error) {
	ormResponse := []ACLORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	db = db.Where(&ACLORM{TenantID: tenantID})
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*Acl{}
	for _, responseEntry := range ormResponse {
		temp, err := ConvertACLFromORM(responseEntry)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultStrictUpdateACL clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateACL(ctx context.Context, in *Acl, db *gorm.DB) (*Acl, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCascadedUpdateACL")
	}
	ormObj, err := ConvertACLToORM(*in)
	if err != nil {
		return nil, err
	}
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	db = db.Where(&ACLORM{TenantID: tenantID})
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertACLFromORM(ormObj)
	if err != nil {
		return nil, err
	}
	return &pbResponse, nil
}
