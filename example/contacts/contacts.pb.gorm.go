// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example/contacts/contacts.proto

package contacts

import gorm1 "github.com/jinzhu/gorm"
import context "context"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ContactORM no comment was provided for message type
type ContactORM struct {
	TenantID     string
	ID           uint64
	FirstName    string
	MiddleName   string
	LastName     string
	EmailAddress string
}

func (ContactORM) TableName() string {
	return "contacts"
}

// ConvertContactToORM takes a pb object and returns an orm object
func ConvertContactToORM(from Contact) ContactORM {
	to := ContactORM{}
	to.ID = from.Id
	to.FirstName = from.FirstName
	to.MiddleName = from.MiddleName
	to.LastName = from.LastName
	to.EmailAddress = from.EmailAddress
	return to
}

// ConvertContactFromORM takes an orm object and returns a pb object
func ConvertContactFromORM(from ContactORM) Contact {
	to := Contact{}
	to.Id = from.ID
	to.FirstName = from.FirstName
	to.MiddleName = from.MiddleName
	to.LastName = from.LastName
	to.EmailAddress = from.EmailAddress
	return to
}

////////////////////////// CURDL for objects
// DefaultCreateContact executes a basic gorm create call
func DefaultCreateContact(ctx context.Context, in *Contact, db *gorm1.DB) (*Contact, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCreateContact")
	}
	ormObj := ConvertContactToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	ormObj.TenantID = tenantID
	if err := db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertContactFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultReadContact executes a basic gorm read call
func DefaultReadContact(ctx context.Context, in *Contact, db *gorm1.DB) (*Contact, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultReadContact")
	}
	ormParams := ConvertContactToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	ormParams.TenantID = tenantID
	ormResponse := ContactORM{}
	if err := db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertContactFromORM(ormResponse)
	return &pbResponse, nil
}

// DefaultUpdateContact executes a basic gorm update call
func DefaultUpdateContact(ctx context.Context, in *Contact, db *gorm1.DB) (*Contact, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultUpdateContact")
	}
	if exists, err := DefaultReadContact(ctx, &Contact{Id: in.GetId()}, db); err != nil {
		return nil, err
	} else if exists == nil {
		return nil, errors.New("Contact not found")
	}
	ormObj := ConvertContactToORM(*in)
	if err := db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertContactFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultDeleteContact executes a basic gorm delete call
func DefaultDeleteContact(ctx context.Context, in *Contact, db *gorm1.DB) error {
	if in == nil {
		return fmt.Errorf("Nil argument to DefaultDeleteContact")
	}
	ormObj := ConvertContactToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return tIDErr
	}
	ormObj.TenantID = tenantID
	err := db.Where(&ormObj).Delete(&ContactORM{}).Error
	return err
}
