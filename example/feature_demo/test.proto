syntax = "proto3";

package example;
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
import "github.com/infobloxopen/protoc-gen-gorm/types/types.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/infobloxopen/protoc-gen-gorm/example/feature_demo;example";

// test_types is a message that serves as an example
message TestTypes {
  option (gorm.opts) = {ormable:true, table: "smorgasbord"};
  string api_only_string = 1 [(gorm.field).drop = true];
  repeated int32 numbers = 2;
  google.protobuf.StringValue optional_string = 3;
  enum status{
    UNKNOWN = 0;
    GOOD = 1;
    BAD = 2;
  }
  status becomes_int = 4;
  google.protobuf.Empty nothingness = 5;
  gormable_types.UUIDValue uuid = 6;
  google.protobuf.Timestamp created_at = 7;
  uint32 type_with_id_id = 8;
}

message TypeWithID {
  option (gorm.opts) = {
    ormable: true,
    include: [
      {type: "int32", name: "uuid", tags: "gorm:\"primary_key\""}
      ]
    };
  string ip = 1 [(gorm.field) = {tags: "gorm:\"ip_addr\""}];
  repeated TestTypes things = 3;
  TestTypes a_nested_object = 4;
  uint32 id = 5;
}

message MultiaccountTypeWithID {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  uint64 id = 1;
  string some_field = 2;
}

message MultiaccountTypeWithoutID {
  option (gorm.opts) = {
    ormable: true,
    multi_account: true
  };
  string some_field = 1;
}

message APIOnlyType {
  string contents = 1;
}

message TypeBecomesEmpty {
  option (gorm.opts).ormable = true;
  APIOnlyType a_thing = 1;
}
