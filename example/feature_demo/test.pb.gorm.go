// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example/feature_demo/test.proto

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	example/feature_demo/test.proto
	example/feature_demo/test2.proto

It has these top-level messages:
	TestTypes
	TypeWithID
	MultiaccountTypeWithID
	MultiaccountTypeWithoutID
	APIOnlyType
	TypeBecomesEmpty
	IntPoint
	CreateIntPointRequest
	CreateIntPointResponse
	ReadIntPointRequest
	ReadIntPointResponse
	UpdateIntPointRequest
	UpdateIntPointResponse
	DeleteIntPointRequest
	ListIntPointResponse
	Something
*/
package example

import context "context"
import errors "errors"
import time "time"

import auth "github.com/infobloxopen/atlas-app-toolkit/mw/auth"
import gorm "github.com/jinzhu/gorm"
import gtypes "github.com/infobloxopen/protoc-gen-gorm/types"
import ops "github.com/infobloxopen/atlas-app-toolkit/op/gorm"
import ptypes "github.com/golang/protobuf/ptypes"
import uuid "github.com/satori/go.uuid"

import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

// TestTypesORM is a message that serves as an example
type TestTypesORM struct {
	// Skipping field from proto option: ApiOnlyString
	// The non-ORMable repeated field "Numbers" can't be included
	OptionalString *string
	BecomesInt     int32
	// Empty type has no ORM equivalency
	Uuid         *uuid.UUID `sql:"type:uuid"`
	CreatedAt    time.Time
	TypeWithIdId uint32
}

// TableName overrides the default tablename generated by GORM
func (TestTypesORM) TableName() string {
	return "test_types"
}

// ConvertTestTypesToORM takes a pb object and returns an orm object
func ConvertTestTypesToORM(from TestTypes) (TestTypesORM, error) {
	to := TestTypesORM{}
	var err error
	// Skipping field: ApiOnlyString
	// Repeated type []int32 is not an ORMable message type
	if from.OptionalString != nil {
		v := from.OptionalString.Value
		to.OptionalString = &v
	}
	to.BecomesInt = int32(from.BecomesInt)
	if from.Uuid != nil {
		tempUUID, uErr := uuid.FromString(from.Uuid.Value)
		if uErr != nil {
			return to, uErr
		}
		to.Uuid = &tempUUID
	}
	if from.CreatedAt != nil {
		if to.CreatedAt, err = ptypes.Timestamp(from.CreatedAt); err != nil {
			return to, err
		}
	}
	to.TypeWithIdId = from.TypeWithIdId
	return to, err
}

// ConvertTestTypesFromORM takes an orm object and returns a pb object
func ConvertTestTypesFromORM(from TestTypesORM) (TestTypes, error) {
	to := TestTypes{}
	var err error
	// Skipping field: ApiOnlyString
	// Repeated type []int32 is not an ORMable message type
	if from.OptionalString != nil {
		to.OptionalString = &google_protobuf1.StringValue{Value: *from.OptionalString}
	}
	to.BecomesInt = TestTypesStatus(from.BecomesInt)
	if from.Uuid != nil {
		to.Uuid = &gtypes.UUIDValue{Value: from.Uuid.String()}
	}
	if to.CreatedAt, err = ptypes.TimestampProto(from.CreatedAt); err != nil {
		return to, err
	}
	to.TypeWithIdId = from.TypeWithIdId
	return to, err
}

// TypeWithIDORM no comment was provided for message type
type TypeWithIDORM struct {
	Uuid          int32           `gorm:"primary_key"`
	Ip            string          `gorm:"ip_addr"`
	Things        []*TestTypesORM `gorm:"foreignkey:TypeWithIDId"`
	ANestedObject *TestTypesORM   `gorm:"foreignkey:TypeWithIDId"`
	Id            uint32
}

// TableName overrides the default tablename generated by GORM
func (TypeWithIDORM) TableName() string {
	return "type_with_ids"
}

// ConvertTypeWithIDToORM takes a pb object and returns an orm object
func ConvertTypeWithIDToORM(from TypeWithID) (TypeWithIDORM, error) {
	to := TypeWithIDORM{}
	var err error
	to.Ip = from.Ip
	for _, v := range from.Things {
		if v != nil {
			if tempThings, cErr := ConvertTestTypesToORM(*v); cErr == nil {
				to.Things = append(to.Things, &tempThings)
			} else {
				return to, cErr
			}
		} else {
			to.Things = append(to.Things, nil)
		}
	}
	if from.ANestedObject != nil {
		tempTestTypes, err := ConvertTestTypesToORM(*from.ANestedObject)
		if err != nil {
			return to, err
		}
		to.ANestedObject = &tempTestTypes
	}
	to.Id = from.Id
	return to, err
}

// ConvertTypeWithIDFromORM takes an orm object and returns a pb object
func ConvertTypeWithIDFromORM(from TypeWithIDORM) (TypeWithID, error) {
	to := TypeWithID{}
	var err error
	to.Ip = from.Ip
	for _, v := range from.Things {
		if v != nil {
			if tempThings, cErr := ConvertTestTypesFromORM(*v); cErr == nil {
				to.Things = append(to.Things, &tempThings)
			} else {
				return to, cErr
			}
		} else {
			to.Things = append(to.Things, nil)
		}
	}
	if from.ANestedObject != nil {
		tempTestTypes, err := ConvertTestTypesFromORM(*from.ANestedObject)
		if err != nil {
			return to, err
		}
		to.ANestedObject = &tempTestTypes
	}
	to.Id = from.Id
	return to, err
}

// MultiaccountTypeWithIDORM no comment was provided for message type
type MultiaccountTypeWithIDORM struct {
	AccountID string
	Id        uint64
	SomeField string
}

// TableName overrides the default tablename generated by GORM
func (MultiaccountTypeWithIDORM) TableName() string {
	return "multiaccount_type_with_ids"
}

// ConvertMultiaccountTypeWithIDToORM takes a pb object and returns an orm object
func ConvertMultiaccountTypeWithIDToORM(from MultiaccountTypeWithID) (MultiaccountTypeWithIDORM, error) {
	to := MultiaccountTypeWithIDORM{}
	var err error
	to.Id = from.Id
	to.SomeField = from.SomeField
	return to, err
}

// ConvertMultiaccountTypeWithIDFromORM takes an orm object and returns a pb object
func ConvertMultiaccountTypeWithIDFromORM(from MultiaccountTypeWithIDORM) (MultiaccountTypeWithID, error) {
	to := MultiaccountTypeWithID{}
	var err error
	to.Id = from.Id
	to.SomeField = from.SomeField
	return to, err
}

// MultiaccountTypeWithoutIDORM no comment was provided for message type
type MultiaccountTypeWithoutIDORM struct {
	AccountID string
	SomeField string
}

// TableName overrides the default tablename generated by GORM
func (MultiaccountTypeWithoutIDORM) TableName() string {
	return "multiaccount_type_without_ids"
}

// ConvertMultiaccountTypeWithoutIDToORM takes a pb object and returns an orm object
func ConvertMultiaccountTypeWithoutIDToORM(from MultiaccountTypeWithoutID) (MultiaccountTypeWithoutIDORM, error) {
	to := MultiaccountTypeWithoutIDORM{}
	var err error
	to.SomeField = from.SomeField
	return to, err
}

// ConvertMultiaccountTypeWithoutIDFromORM takes an orm object and returns a pb object
func ConvertMultiaccountTypeWithoutIDFromORM(from MultiaccountTypeWithoutIDORM) (MultiaccountTypeWithoutID, error) {
	to := MultiaccountTypeWithoutID{}
	var err error
	to.SomeField = from.SomeField
	return to, err
}

// TypeBecomesEmptyORM no comment was provided for message type
type TypeBecomesEmptyORM struct {
	// Skipping type *APIOnlyType, not tagged as ormable
}

// TableName overrides the default tablename generated by GORM
func (TypeBecomesEmptyORM) TableName() string {
	return "type_becomes_empties"
}

// ConvertTypeBecomesEmptyToORM takes a pb object and returns an orm object
func ConvertTypeBecomesEmptyToORM(from TypeBecomesEmpty) (TypeBecomesEmptyORM, error) {
	to := TypeBecomesEmptyORM{}
	var err error
	return to, err
}

// ConvertTypeBecomesEmptyFromORM takes an orm object and returns a pb object
func ConvertTypeBecomesEmptyFromORM(from TypeBecomesEmptyORM) (TypeBecomesEmpty, error) {
	to := TypeBecomesEmpty{}
	var err error
	return to, err
}

////////////////////////// CURDL for objects
// DefaultCreateTestTypes executes a basic gorm create call
func DefaultCreateTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) (*TestTypes, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateTestTypes")
	}
	ormObj, err := ConvertTestTypesToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTestTypesFromORM(ormObj)
	return &pbResponse, err
}

// DefaultReadTestTypes executes a basic gorm read call
func DefaultReadTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) (*TestTypes, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadTestTypes")
	}
	ormParams, err := ConvertTestTypesToORM(*in)
	if err != nil {
		return nil, err
	}
	ormResponse := TestTypesORM{}
	if err = db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTestTypesFromORM(ormResponse)
	return &pbResponse, err
}

// DefaultUpdateTestTypes executes a basic gorm update call
func DefaultUpdateTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) (*TestTypes, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultUpdateTestTypes")
	}
	ormObj, err := ConvertTestTypesToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTestTypesFromORM(ormObj)
	return &pbResponse, err
}

func DefaultDeleteTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteTestTypes")
	}
	ormObj, err := ConvertTestTypesToORM(*in)
	if err != nil {
		return err
	}
	err = db.Where(&ormObj).Delete(&TestTypesORM{}).Error
	return err
}

// DefaultListTestTypes executes a gorm list call
func DefaultListTestTypes(ctx context.Context, db *gorm.DB) ([]*TestTypes, error) {
	ormResponse := []TestTypesORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*TestTypes{}
	for _, responseEntry := range ormResponse {
		temp, err := ConvertTestTypesFromORM(responseEntry)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultStrictUpdateTestTypes clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) (*TestTypes, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCascadedUpdateTestTypes")
	}
	ormObj, err := ConvertTestTypesToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTestTypesFromORM(ormObj)
	if err != nil {
		return nil, err
	}
	return &pbResponse, nil
}

// DefaultCreateTypeWithID executes a basic gorm create call
func DefaultCreateTypeWithID(ctx context.Context, in *TypeWithID, db *gorm.DB) (*TypeWithID, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateTypeWithID")
	}
	ormObj, err := ConvertTypeWithIDToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTypeWithIDFromORM(ormObj)
	return &pbResponse, err
}

// DefaultReadTypeWithID executes a basic gorm read call
func DefaultReadTypeWithID(ctx context.Context, in *TypeWithID, db *gorm.DB) (*TypeWithID, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadTypeWithID")
	}
	ormParams, err := ConvertTypeWithIDToORM(*in)
	if err != nil {
		return nil, err
	}
	ormResponse := TypeWithIDORM{}
	if err = db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTypeWithIDFromORM(ormResponse)
	return &pbResponse, err
}

// DefaultUpdateTypeWithID executes a basic gorm update call
func DefaultUpdateTypeWithID(ctx context.Context, in *TypeWithID, db *gorm.DB) (*TypeWithID, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultUpdateTypeWithID")
	}
	ormObj, err := ConvertTypeWithIDToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTypeWithIDFromORM(ormObj)
	return &pbResponse, err
}

func DefaultDeleteTypeWithID(ctx context.Context, in *TypeWithID, db *gorm.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteTypeWithID")
	}
	ormObj, err := ConvertTypeWithIDToORM(*in)
	if err != nil {
		return err
	}
	err = db.Where(&ormObj).Delete(&TypeWithIDORM{}).Error
	return err
}

// DefaultListTypeWithID executes a gorm list call
func DefaultListTypeWithID(ctx context.Context, db *gorm.DB) ([]*TypeWithID, error) {
	ormResponse := []TypeWithIDORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*TypeWithID{}
	for _, responseEntry := range ormResponse {
		temp, err := ConvertTypeWithIDFromORM(responseEntry)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultStrictUpdateTypeWithID clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTypeWithID(ctx context.Context, in *TypeWithID, db *gorm.DB) (*TypeWithID, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCascadedUpdateTypeWithID")
	}
	ormObj, err := ConvertTypeWithIDToORM(*in)
	if err != nil {
		return nil, err
	}
	filterObjTestTypes := TestTypesORM{}
	if ormObj.Id == 0 {
		return nil, errors.New("Can't do overwriting update with no 'Id' value for FK of field 'Things'")
	}
	filterObjTestTypes.TypeWithIdId = ormObj.Id
	if err = db.Where(filterObjTestTypes).Delete(TestTypes{}).Error; err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTypeWithIDFromORM(ormObj)
	if err != nil {
		return nil, err
	}
	return &pbResponse, nil
}

// DefaultCreateMultiaccountTypeWithID executes a basic gorm create call
func DefaultCreateMultiaccountTypeWithID(ctx context.Context, in *MultiaccountTypeWithID, db *gorm.DB) (*MultiaccountTypeWithID, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateMultiaccountTypeWithID")
	}
	ormObj, err := ConvertMultiaccountTypeWithIDToORM(*in)
	if err != nil {
		return nil, err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return nil, err
	}
	ormObj.AccountID = accountID
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertMultiaccountTypeWithIDFromORM(ormObj)
	return &pbResponse, err
}

// DefaultReadMultiaccountTypeWithID executes a basic gorm read call
func DefaultReadMultiaccountTypeWithID(ctx context.Context, in *MultiaccountTypeWithID, db *gorm.DB) (*MultiaccountTypeWithID, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadMultiaccountTypeWithID")
	}
	ormParams, err := ConvertMultiaccountTypeWithIDToORM(*in)
	if err != nil {
		return nil, err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return nil, err
	}
	ormParams.AccountID = accountID
	ormResponse := MultiaccountTypeWithIDORM{}
	if err = db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertMultiaccountTypeWithIDFromORM(ormResponse)
	return &pbResponse, err
}

// DefaultUpdateMultiaccountTypeWithID executes a basic gorm update call
func DefaultUpdateMultiaccountTypeWithID(ctx context.Context, in *MultiaccountTypeWithID, db *gorm.DB) (*MultiaccountTypeWithID, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultUpdateMultiaccountTypeWithID")
	}
	if exists, err := DefaultReadMultiaccountTypeWithID(ctx, &MultiaccountTypeWithID{Id: in.GetId()}, db); err != nil {
		return nil, err
	} else if exists == nil {
		return nil, errors.New("MultiaccountTypeWithID not found")
	}
	ormObj, err := ConvertMultiaccountTypeWithIDToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertMultiaccountTypeWithIDFromORM(ormObj)
	return &pbResponse, err
}

func DefaultDeleteMultiaccountTypeWithID(ctx context.Context, in *MultiaccountTypeWithID, db *gorm.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteMultiaccountTypeWithID")
	}
	ormObj, err := ConvertMultiaccountTypeWithIDToORM(*in)
	if err != nil {
		return err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return err
	}
	ormObj.AccountID = accountID
	err = db.Where(&ormObj).Delete(&MultiaccountTypeWithIDORM{}).Error
	return err
}

// DefaultListMultiaccountTypeWithID executes a gorm list call
func DefaultListMultiaccountTypeWithID(ctx context.Context, db *gorm.DB) ([]*MultiaccountTypeWithID, error) {
	ormResponse := []MultiaccountTypeWithIDORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return nil, err
	}
	db = db.Where(&MultiaccountTypeWithIDORM{AccountID: accountID})
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*MultiaccountTypeWithID{}
	for _, responseEntry := range ormResponse {
		temp, err := ConvertMultiaccountTypeWithIDFromORM(responseEntry)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultStrictUpdateMultiaccountTypeWithID clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMultiaccountTypeWithID(ctx context.Context, in *MultiaccountTypeWithID, db *gorm.DB) (*MultiaccountTypeWithID, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCascadedUpdateMultiaccountTypeWithID")
	}
	ormObj, err := ConvertMultiaccountTypeWithIDToORM(*in)
	if err != nil {
		return nil, err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return nil, err
	}
	db = db.Where(&MultiaccountTypeWithIDORM{AccountID: accountID})
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertMultiaccountTypeWithIDFromORM(ormObj)
	if err != nil {
		return nil, err
	}
	return &pbResponse, nil
}

// DefaultCreateMultiaccountTypeWithoutID executes a basic gorm create call
func DefaultCreateMultiaccountTypeWithoutID(ctx context.Context, in *MultiaccountTypeWithoutID, db *gorm.DB) (*MultiaccountTypeWithoutID, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateMultiaccountTypeWithoutID")
	}
	ormObj, err := ConvertMultiaccountTypeWithoutIDToORM(*in)
	if err != nil {
		return nil, err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return nil, err
	}
	ormObj.AccountID = accountID
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertMultiaccountTypeWithoutIDFromORM(ormObj)
	return &pbResponse, err
}

// DefaultReadMultiaccountTypeWithoutID executes a basic gorm read call
func DefaultReadMultiaccountTypeWithoutID(ctx context.Context, in *MultiaccountTypeWithoutID, db *gorm.DB) (*MultiaccountTypeWithoutID, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadMultiaccountTypeWithoutID")
	}
	ormParams, err := ConvertMultiaccountTypeWithoutIDToORM(*in)
	if err != nil {
		return nil, err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return nil, err
	}
	ormParams.AccountID = accountID
	ormResponse := MultiaccountTypeWithoutIDORM{}
	if err = db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertMultiaccountTypeWithoutIDFromORM(ormResponse)
	return &pbResponse, err
}

// Cannot autogen DefaultUpdateMultiaccountTypeWithoutID: this is a multi-account table without an "id" field in the message.

func DefaultDeleteMultiaccountTypeWithoutID(ctx context.Context, in *MultiaccountTypeWithoutID, db *gorm.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteMultiaccountTypeWithoutID")
	}
	ormObj, err := ConvertMultiaccountTypeWithoutIDToORM(*in)
	if err != nil {
		return err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return err
	}
	ormObj.AccountID = accountID
	err = db.Where(&ormObj).Delete(&MultiaccountTypeWithoutIDORM{}).Error
	return err
}

// DefaultListMultiaccountTypeWithoutID executes a gorm list call
func DefaultListMultiaccountTypeWithoutID(ctx context.Context, db *gorm.DB) ([]*MultiaccountTypeWithoutID, error) {
	ormResponse := []MultiaccountTypeWithoutIDORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return nil, err
	}
	db = db.Where(&MultiaccountTypeWithoutIDORM{AccountID: accountID})
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*MultiaccountTypeWithoutID{}
	for _, responseEntry := range ormResponse {
		temp, err := ConvertMultiaccountTypeWithoutIDFromORM(responseEntry)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultStrictUpdateMultiaccountTypeWithoutID clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMultiaccountTypeWithoutID(ctx context.Context, in *MultiaccountTypeWithoutID, db *gorm.DB) (*MultiaccountTypeWithoutID, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCascadedUpdateMultiaccountTypeWithoutID")
	}
	ormObj, err := ConvertMultiaccountTypeWithoutIDToORM(*in)
	if err != nil {
		return nil, err
	}
	accountID, err := auth.GetAccountID(ctx, nil)
	if err != nil {
		return nil, err
	}
	db = db.Where(&MultiaccountTypeWithoutIDORM{AccountID: accountID})
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertMultiaccountTypeWithoutIDFromORM(ormObj)
	if err != nil {
		return nil, err
	}
	return &pbResponse, nil
}

// DefaultCreateTypeBecomesEmpty executes a basic gorm create call
func DefaultCreateTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) (*TypeBecomesEmpty, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateTypeBecomesEmpty")
	}
	ormObj, err := ConvertTypeBecomesEmptyToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTypeBecomesEmptyFromORM(ormObj)
	return &pbResponse, err
}

// DefaultReadTypeBecomesEmpty executes a basic gorm read call
func DefaultReadTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) (*TypeBecomesEmpty, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadTypeBecomesEmpty")
	}
	ormParams, err := ConvertTypeBecomesEmptyToORM(*in)
	if err != nil {
		return nil, err
	}
	ormResponse := TypeBecomesEmptyORM{}
	if err = db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTypeBecomesEmptyFromORM(ormResponse)
	return &pbResponse, err
}

// DefaultUpdateTypeBecomesEmpty executes a basic gorm update call
func DefaultUpdateTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) (*TypeBecomesEmpty, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultUpdateTypeBecomesEmpty")
	}
	ormObj, err := ConvertTypeBecomesEmptyToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTypeBecomesEmptyFromORM(ormObj)
	return &pbResponse, err
}

func DefaultDeleteTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteTypeBecomesEmpty")
	}
	ormObj, err := ConvertTypeBecomesEmptyToORM(*in)
	if err != nil {
		return err
	}
	err = db.Where(&ormObj).Delete(&TypeBecomesEmptyORM{}).Error
	return err
}

// DefaultListTypeBecomesEmpty executes a gorm list call
func DefaultListTypeBecomesEmpty(ctx context.Context, db *gorm.DB) ([]*TypeBecomesEmpty, error) {
	ormResponse := []TypeBecomesEmptyORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*TypeBecomesEmpty{}
	for _, responseEntry := range ormResponse {
		temp, err := ConvertTypeBecomesEmptyFromORM(responseEntry)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultStrictUpdateTypeBecomesEmpty clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) (*TypeBecomesEmpty, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCascadedUpdateTypeBecomesEmpty")
	}
	ormObj, err := ConvertTypeBecomesEmptyToORM(*in)
	if err != nil {
		return nil, err
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse, err := ConvertTypeBecomesEmptyFromORM(ormObj)
	if err != nil {
		return nil, err
	}
	return &pbResponse, nil
}
