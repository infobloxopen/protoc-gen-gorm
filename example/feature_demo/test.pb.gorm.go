// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example/feature_demo/test.proto

package example

import context "context"
import gorm "github.com/jinzhu/gorm"
import ops "github.com/Infoblox-CTO/ngp.api.toolkit/op/gorm"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TestTypesORM is a message that serves as an example
type TestTypesORM struct {
	// Skipping field from proto option: ApiOnlyString
	// A repeated raw type is not supported by gORM
	OptionalString *string
	BecomesInt     int32
	// Empty type has no ORM equivalency
}

// TableName overrides the default tablename generated by GORM
func (TestTypesORM) TableName() string {
	return "smorgasbord"
}

// ConvertTestTypesToORM takes a pb object and returns an orm object
func ConvertTestTypesToORM(from TestTypes) TestTypesORM {
	to := TestTypesORM{}
	// Skipping field: ApiOnlyString
	if from.OptionalString != nil {
		v := from.OptionalString.Value
		to.OptionalString = &v
	}
	to.BecomesInt = int32(from.BecomesInt)
	return to
}

// ConvertTestTypesFromORM takes an orm object and returns a pb object
func ConvertTestTypesFromORM(from TestTypesORM) TestTypes {
	to := TestTypes{}
	// Skipping field: ApiOnlyString
	if from.OptionalString != nil {
		to.OptionalString = &google_protobuf1.StringValue{Value: *from.OptionalString}
	}
	to.BecomesInt = TestTypesStatus(from.BecomesInt)
	return to
}

// TypeWithIDORM no comment was provided for message type
type TypeWithIDORM struct {
	UUID          int32           `gorm:"primary_key"`
	IP            string          `gorm:"ip_addr"`
	Things        []*TestTypesORM `gorm:"foreignkey:TypeWithIDID"`
	ANestedObject *TestTypesORM   `gorm:"foreignkey:TypeWithIDID"`
}

// TableName overrides the default tablename generated by GORM
func (TypeWithIDORM) TableName() string {
	return "type_with_ids"
}

// ConvertTypeWithIDToORM takes a pb object and returns an orm object
func ConvertTypeWithIDToORM(from TypeWithId) TypeWithIDORM {
	to := TypeWithIDORM{}
	to.IP = from.Ip
	for _, v := range from.Things {
		if from.Things != nil {
			tempThings := ConvertTestTypesToORM(*v)
			to.Things = append(to.Things, &tempThings)
		} else {
			to.Things = append(to.Things, nil)
		}
	}
	if from.ANestedObject != nil {
		tempANestedObject := ConvertTestTypesToORM(*from.ANestedObject)
		to.ANestedObject = &tempANestedObject
	}
	return to
}

// ConvertTypeWithIDFromORM takes an orm object and returns a pb object
func ConvertTypeWithIDFromORM(from TypeWithIDORM) TypeWithId {
	to := TypeWithId{}
	to.Ip = from.IP
	for _, v := range from.Things {
		if from.Things != nil {
			tempThings := ConvertTestTypesFromORM(*v)
			to.Things = append(to.Things, &tempThings)
		} else {
			to.Things = append(to.Things, nil)
		}
	}
	if from.ANestedObject != nil {
		tempANestedObject := ConvertTestTypesFromORM(*from.ANestedObject)
		to.ANestedObject = &tempANestedObject
	}
	return to
}

// MultitenantTypeWithIDORM no comment was provided for message type
type MultitenantTypeWithIDORM struct {
	TenantID  string
	ID        uint64
	SomeField string
}

// TableName overrides the default tablename generated by GORM
func (MultitenantTypeWithIDORM) TableName() string {
	return "multitenant_type_with_ids"
}

// ConvertMultitenantTypeWithIDToORM takes a pb object and returns an orm object
func ConvertMultitenantTypeWithIDToORM(from MultitenantTypeWithId) MultitenantTypeWithIDORM {
	to := MultitenantTypeWithIDORM{}
	to.ID = from.Id
	to.SomeField = from.SomeField
	return to
}

// ConvertMultitenantTypeWithIDFromORM takes an orm object and returns a pb object
func ConvertMultitenantTypeWithIDFromORM(from MultitenantTypeWithIDORM) MultitenantTypeWithId {
	to := MultitenantTypeWithId{}
	to.Id = from.ID
	to.SomeField = from.SomeField
	return to
}

// MultitenantTypeWithoutIDORM no comment was provided for message type
type MultitenantTypeWithoutIDORM struct {
	TenantID  string
	SomeField string
}

// TableName overrides the default tablename generated by GORM
func (MultitenantTypeWithoutIDORM) TableName() string {
	return "multitenant_type_without_ids"
}

// ConvertMultitenantTypeWithoutIDToORM takes a pb object and returns an orm object
func ConvertMultitenantTypeWithoutIDToORM(from MultitenantTypeWithoutId) MultitenantTypeWithoutIDORM {
	to := MultitenantTypeWithoutIDORM{}
	to.SomeField = from.SomeField
	return to
}

// ConvertMultitenantTypeWithoutIDFromORM takes an orm object and returns a pb object
func ConvertMultitenantTypeWithoutIDFromORM(from MultitenantTypeWithoutIDORM) MultitenantTypeWithoutId {
	to := MultitenantTypeWithoutId{}
	to.SomeField = from.SomeField
	return to
}

// TypeBecomesEmptyORM no comment was provided for message type
type TypeBecomesEmptyORM struct {
	// Skipping type *ApiOnlyType, not tagged as ormable
}

// TableName overrides the default tablename generated by GORM
func (TypeBecomesEmptyORM) TableName() string {
	return "type_becomes_empties"
}

// ConvertTypeBecomesEmptyToORM takes a pb object and returns an orm object
func ConvertTypeBecomesEmptyToORM(from TypeBecomesEmpty) TypeBecomesEmptyORM {
	to := TypeBecomesEmptyORM{}
	return to
}

// ConvertTypeBecomesEmptyFromORM takes an orm object and returns a pb object
func ConvertTypeBecomesEmptyFromORM(from TypeBecomesEmptyORM) TypeBecomesEmpty {
	to := TypeBecomesEmpty{}
	return to
}

////////////////////////// CURDL for objects
// DefaultCreateTestTypes executes a basic gorm create call
func DefaultCreateTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) (*TestTypes, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCreateTestTypes")
	}
	ormObj := ConvertTestTypesToORM(*in)
	if err := db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTestTypesFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultReadTestTypes executes a basic gorm read call
func DefaultReadTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) (*TestTypes, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultReadTestTypes")
	}
	ormParams := ConvertTestTypesToORM(*in)
	ormResponse := TestTypesORM{}
	if err := db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTestTypesFromORM(ormResponse)
	return &pbResponse, nil
}

// DefaultUpdateTestTypes executes a basic gorm update call
func DefaultUpdateTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) (*TestTypes, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultUpdateTestTypes")
	}
	ormObj := ConvertTestTypesToORM(*in)
	if err := db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTestTypesFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultDeleteTestTypes executes a basic gorm delete call
func DefaultDeleteTestTypes(ctx context.Context, in *TestTypes, db *gorm.DB) error {
	if in == nil {
		return fmt.Errorf("Nil argument to DefaultDeleteTestTypes")
	}
	ormObj := ConvertTestTypesToORM(*in)
	err := db.Where(&ormObj).Delete(&TestTypesORM{}).Error
	return err
}

// DefaultListTestTypes executes a basic gorm delete call
func DefaultListTestTypes(ctx context.Context, db *gorm.DB) ([]*TestTypes, error) {
	ormResponse := []TestTypesORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*TestTypes{}
	for _, responseEntry := range ormResponse {
		temp := ConvertTestTypesFromORM(responseEntry)
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultCreateTypeWithID executes a basic gorm create call
func DefaultCreateTypeWithID(ctx context.Context, in *TypeWithId, db *gorm.DB) (*TypeWithId, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCreateTypeWithID")
	}
	ormObj := ConvertTypeWithIDToORM(*in)
	if err := db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTypeWithIDFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultReadTypeWithID executes a basic gorm read call
func DefaultReadTypeWithID(ctx context.Context, in *TypeWithId, db *gorm.DB) (*TypeWithId, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultReadTypeWithID")
	}
	ormParams := ConvertTypeWithIDToORM(*in)
	ormResponse := TypeWithIDORM{}
	if err := db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTypeWithIDFromORM(ormResponse)
	return &pbResponse, nil
}

// DefaultUpdateTypeWithID executes a basic gorm update call
func DefaultUpdateTypeWithID(ctx context.Context, in *TypeWithId, db *gorm.DB) (*TypeWithId, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultUpdateTypeWithID")
	}
	ormObj := ConvertTypeWithIDToORM(*in)
	if err := db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTypeWithIDFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultDeleteTypeWithID executes a basic gorm delete call
func DefaultDeleteTypeWithID(ctx context.Context, in *TypeWithId, db *gorm.DB) error {
	if in == nil {
		return fmt.Errorf("Nil argument to DefaultDeleteTypeWithID")
	}
	ormObj := ConvertTypeWithIDToORM(*in)
	err := db.Where(&ormObj).Delete(&TypeWithIDORM{}).Error
	return err
}

// DefaultListTypeWithID executes a basic gorm delete call
func DefaultListTypeWithID(ctx context.Context, db *gorm.DB) ([]*TypeWithID, error) {
	ormResponse := []TypeWithIDORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*TypeWithID{}
	for _, responseEntry := range ormResponse {
		temp := ConvertTypeWithIDFromORM(responseEntry)
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultCreateMultitenantTypeWithID executes a basic gorm create call
func DefaultCreateMultitenantTypeWithID(ctx context.Context, in *MultitenantTypeWithId, db *gorm.DB) (*MultitenantTypeWithId, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCreateMultitenantTypeWithID")
	}
	ormObj := ConvertMultitenantTypeWithIDToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	ormObj.TenantID = tenantID
	if err := db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertMultitenantTypeWithIDFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultReadMultitenantTypeWithID executes a basic gorm read call
func DefaultReadMultitenantTypeWithID(ctx context.Context, in *MultitenantTypeWithId, db *gorm.DB) (*MultitenantTypeWithId, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultReadMultitenantTypeWithID")
	}
	ormParams := ConvertMultitenantTypeWithIDToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	ormParams.TenantID = tenantID
	ormResponse := MultitenantTypeWithIDORM{}
	if err := db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertMultitenantTypeWithIDFromORM(ormResponse)
	return &pbResponse, nil
}

// DefaultUpdateMultitenantTypeWithID executes a basic gorm update call
func DefaultUpdateMultitenantTypeWithID(ctx context.Context, in *MultitenantTypeWithId, db *gorm.DB) (*MultitenantTypeWithId, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultUpdateMultitenantTypeWithID")
	}
	if exists, err := DefaultReadMultitenantTypeWithID(ctx, &MultitenantTypeWithID{Id: in.GetId()}, db); err != nil {
		return nil, err
	} else if exists == nil {
		return nil, errors.New("MultitenantTypeWithID not found")
	}
	ormObj := ConvertMultitenantTypeWithIDToORM(*in)
	if err := db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertMultitenantTypeWithIDFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultDeleteMultitenantTypeWithID executes a basic gorm delete call
func DefaultDeleteMultitenantTypeWithID(ctx context.Context, in *MultitenantTypeWithId, db *gorm.DB) error {
	if in == nil {
		return fmt.Errorf("Nil argument to DefaultDeleteMultitenantTypeWithID")
	}
	ormObj := ConvertMultitenantTypeWithIDToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return tIDErr
	}
	ormObj.TenantID = tenantID
	err := db.Where(&ormObj).Delete(&MultitenantTypeWithIDORM{}).Error
	return err
}

// DefaultListMultitenantTypeWithID executes a basic gorm delete call
func DefaultListMultitenantTypeWithID(ctx context.Context, db *gorm.DB) ([]*MultitenantTypeWithID, error) {
	ormResponse := []MultitenantTypeWithIDORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*MultitenantTypeWithID{}
	for _, responseEntry := range ormResponse {
		temp := ConvertMultitenantTypeWithIDFromORM(responseEntry)
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultCreateMultitenantTypeWithoutID executes a basic gorm create call
func DefaultCreateMultitenantTypeWithoutID(ctx context.Context, in *MultitenantTypeWithoutId, db *gorm.DB) (*MultitenantTypeWithoutId, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCreateMultitenantTypeWithoutID")
	}
	ormObj := ConvertMultitenantTypeWithoutIDToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	ormObj.TenantID = tenantID
	if err := db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertMultitenantTypeWithoutIDFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultReadMultitenantTypeWithoutID executes a basic gorm read call
func DefaultReadMultitenantTypeWithoutID(ctx context.Context, in *MultitenantTypeWithoutId, db *gorm.DB) (*MultitenantTypeWithoutId, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultReadMultitenantTypeWithoutID")
	}
	ormParams := ConvertMultitenantTypeWithoutIDToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return nil, tIDErr
	}
	ormParams.TenantID = tenantID
	ormResponse := MultitenantTypeWithoutIDORM{}
	if err := db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertMultitenantTypeWithoutIDFromORM(ormResponse)
	return &pbResponse, nil
}

// Cannot autogen DefaultUpdateMultitenantTypeWithoutID: this is a multi-tenant table without an "id" field in the message.

// DefaultDeleteMultitenantTypeWithoutID executes a basic gorm delete call
func DefaultDeleteMultitenantTypeWithoutID(ctx context.Context, in *MultitenantTypeWithoutId, db *gorm.DB) error {
	if in == nil {
		return fmt.Errorf("Nil argument to DefaultDeleteMultitenantTypeWithoutID")
	}
	ormObj := ConvertMultitenantTypeWithoutIDToORM(*in)
	tenantID, tIDErr := auth.GetTenantID(ctx)
	if tIDErr != nil {
		return tIDErr
	}
	ormObj.TenantID = tenantID
	err := db.Where(&ormObj).Delete(&MultitenantTypeWithoutIDORM{}).Error
	return err
}

// DefaultListMultitenantTypeWithoutID executes a basic gorm delete call
func DefaultListMultitenantTypeWithoutID(ctx context.Context, db *gorm.DB) ([]*MultitenantTypeWithoutID, error) {
	ormResponse := []MultitenantTypeWithoutIDORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*MultitenantTypeWithoutID{}
	for _, responseEntry := range ormResponse {
		temp := ConvertMultitenantTypeWithoutIDFromORM(responseEntry)
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

// DefaultCreateTypeBecomesEmpty executes a basic gorm create call
func DefaultCreateTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) (*TypeBecomesEmpty, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultCreateTypeBecomesEmpty")
	}
	ormObj := ConvertTypeBecomesEmptyToORM(*in)
	if err := db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTypeBecomesEmptyFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultReadTypeBecomesEmpty executes a basic gorm read call
func DefaultReadTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) (*TypeBecomesEmpty, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultReadTypeBecomesEmpty")
	}
	ormParams := ConvertTypeBecomesEmptyToORM(*in)
	ormResponse := TypeBecomesEmptyORM{}
	if err := db.Set("gorm:auto_preload", true).Where(&ormParams).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTypeBecomesEmptyFromORM(ormResponse)
	return &pbResponse, nil
}

// DefaultUpdateTypeBecomesEmpty executes a basic gorm update call
func DefaultUpdateTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) (*TypeBecomesEmpty, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultUpdateTypeBecomesEmpty")
	}
	ormObj := ConvertTypeBecomesEmptyToORM(*in)
	if err := db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	pbResponse := ConvertTypeBecomesEmptyFromORM(ormObj)
	return &pbResponse, nil
}

// DefaultDeleteTypeBecomesEmpty executes a basic gorm delete call
func DefaultDeleteTypeBecomesEmpty(ctx context.Context, in *TypeBecomesEmpty, db *gorm.DB) error {
	if in == nil {
		return fmt.Errorf("Nil argument to DefaultDeleteTypeBecomesEmpty")
	}
	ormObj := ConvertTypeBecomesEmptyToORM(*in)
	err := db.Where(&ormObj).Delete(&TypeBecomesEmptyORM{}).Error
	return err
}

// DefaultListTypeBecomesEmpty executes a basic gorm delete call
func DefaultListTypeBecomesEmpty(ctx context.Context, db *gorm.DB) ([]*TypeBecomesEmpty, error) {
	ormResponse := []TypeBecomesEmptyORM{}
	db, err := ops.ApplyCollectionOperators(db, ctx)
	if err != nil {
		return nil, err
	}
	if err := db.Set("gorm:auto_preload", true).Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	pbResponse := []*TypeBecomesEmpty{}
	for _, responseEntry := range ormResponse {
		temp := ConvertTypeBecomesEmptyFromORM(responseEntry)
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}
