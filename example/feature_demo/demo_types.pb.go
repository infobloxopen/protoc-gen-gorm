// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example/feature_demo/demo_types.proto

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import gorm_types "github.com/infobloxopen/protoc-gen-gorm/types"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"
import user "github.com/infobloxopen/protoc-gen-gorm/example/user"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// enums are mapped to the their underlying numeric value in the db.
// This is practical from an API perspective, but tougher for debugging.
// Strings with validation constraints can be used instead if desired
type TestTypesStatus int32

const (
	TestTypes_UNKNOWN TestTypesStatus = 0
	TestTypes_GOOD    TestTypesStatus = 1
	TestTypes_BAD     TestTypesStatus = 2
)

var TestTypesStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "GOOD",
	2: "BAD",
}
var TestTypesStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"GOOD":    1,
	"BAD":     2,
}

func (x TestTypesStatus) String() string {
	return proto.EnumName(TestTypesStatus_name, int32(x))
}
func (TestTypesStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

// test_types is a message that includes a representative sample of the
// available types
type TestTypes struct {
	// the (gorm.field).drop option allows for setting a field to be API only
	ApiOnlyString string `protobuf:"bytes,1,opt,name=api_only_string,json=apiOnlyString" json:"api_only_string,omitempty"`
	// repeated raw types are currently unsupported, so this field will be dropped
	// at the ORM level
	Numbers []int32 `protobuf:"varint,2,rep,packed,name=numbers" json:"numbers,omitempty"`
	// a StringValue represents a Nullable string
	OptionalString *google_protobuf1.StringValue `protobuf:"bytes,3,opt,name=optional_string,json=optionalString" json:"optional_string,omitempty"`
	BecomesInt     TestTypesStatus               `protobuf:"varint,4,opt,name=becomes_int,json=becomesInt,enum=example.TestTypesStatus" json:"becomes_int,omitempty"`
	// The Empty type serves no purpose outside of rpc calls and is dropped
	// automatically from objects
	Nothingness *google_protobuf2.Empty `protobuf:"bytes,5,opt,name=nothingness" json:"nothingness,omitempty"`
	// The UUID custom type should act like a StringValue at the API level, but is
	// automatically converted to and from a uuid.UUID (github.com/satori/go.uuid)
	Uuid *gorm_types.UUID `protobuf:"bytes,6,opt,name=uuid" json:"uuid,omitempty"`
	// Timestamps convert to golang's time.Time type, and created_at and
	// updated_at values are automatically filled by GORM
	CreatedAt *google_protobuf3.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// This represents a foreign key to the 'type_with_id' type for associations
	// This could be hidden from the API (or soon autogenerated).
	TypeWithIdId uint32 `protobuf:"varint,8,opt,name=type_with_id_id,json=typeWithIdId" json:"type_with_id_id,omitempty"`
	// This is an arbitrary JSON string that is marshalled and unmarshalled
	// specially in grpc-gateway as a JSON object
	JsonField *gorm_types.JSONValue `protobuf:"bytes,9,opt,name=json_field,json=jsonField" json:"json_field,omitempty"`
	// The UUIDValue custom type should act like a StringValue at the API level, but is
	// automatically converted to and from a *uuid.UUID (github.com/satori/go.uuid)
	NullableUuid *gorm_types.UUIDValue `protobuf:"bytes,10,opt,name=nullable_uuid,json=nullableUuid" json:"nullable_uuid,omitempty"`
	// The TimeOnly should act as uint32 value at business layer, but is automatically
	// converted to/from string at API and ORM level
	TimeOnly *gorm_types.TimeOnly `protobuf:"bytes,11,opt,name=time_only,json=timeOnly" json:"time_only,omitempty"`
}

func (m *TestTypes) Reset()                    { *m = TestTypes{} }
func (m *TestTypes) String() string            { return proto.CompactTextString(m) }
func (*TestTypes) ProtoMessage()               {}
func (*TestTypes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TestTypes) GetApiOnlyString() string {
	if m != nil {
		return m.ApiOnlyString
	}
	return ""
}

func (m *TestTypes) GetNumbers() []int32 {
	if m != nil {
		return m.Numbers
	}
	return nil
}

func (m *TestTypes) GetOptionalString() *google_protobuf1.StringValue {
	if m != nil {
		return m.OptionalString
	}
	return nil
}

func (m *TestTypes) GetBecomesInt() TestTypesStatus {
	if m != nil {
		return m.BecomesInt
	}
	return TestTypes_UNKNOWN
}

func (m *TestTypes) GetNothingness() *google_protobuf2.Empty {
	if m != nil {
		return m.Nothingness
	}
	return nil
}

func (m *TestTypes) GetUuid() *gorm_types.UUID {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *TestTypes) GetCreatedAt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TestTypes) GetTypeWithIdId() uint32 {
	if m != nil {
		return m.TypeWithIdId
	}
	return 0
}

func (m *TestTypes) GetJsonField() *gorm_types.JSONValue {
	if m != nil {
		return m.JsonField
	}
	return nil
}

func (m *TestTypes) GetNullableUuid() *gorm_types.UUIDValue {
	if m != nil {
		return m.NullableUuid
	}
	return nil
}

func (m *TestTypes) GetTimeOnly() *gorm_types.TimeOnly {
	if m != nil {
		return m.TimeOnly
	}
	return nil
}

// TypeWithID demonstrates some basic assocation behavior
type TypeWithID struct {
	// any field named 'id' is assumed by gorm to be the primary key for the
	// object.
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The field option also allows arbitrary tag setting, such as informing
	// gorm of a primary key, different column names or different types in the db
	Ip string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	// A default has-many relationship, will error on generation if no FK field,
	// convention {typename}_id, is present. These FK fields will be automatically
	// populated on create and update.
	Things []*TestTypes `protobuf:"bytes,3,rep,name=things" json:"things,omitempty"`
	// A default has-one relationship, will error as above
	ANestedObject *TestTypes `protobuf:"bytes,4,opt,name=a_nested_object,json=aNestedObject" json:"a_nested_object,omitempty"`
	// An in-package and cross-package imported type (in-package can use any
	// association type, cross-package is limited to belongs_to and many_to_many)
	Point               *IntPoint                     `protobuf:"bytes,5,opt,name=point" json:"point,omitempty"`
	User                *user.User                    `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	Address             *gorm_types.InetValue         `protobuf:"bytes,7,opt,name=address" json:"address,omitempty"`
	MultiaccountTypeIds []uint32                      `protobuf:"varint,8,rep,packed,name=multiaccount_type_ids,json=multiaccountTypeIds" json:"multiaccount_type_ids,omitempty"`
	SyntheticField      *APIOnlyType                  `protobuf:"bytes,9,opt,name=synthetic_field,json=syntheticField" json:"synthetic_field,omitempty"`
	TagTest             float32                       `protobuf:"fixed32,10,opt,name=tag_test,json=tagTest" json:"tag_test,omitempty"`
	TagSizeTest         string                        `protobuf:"bytes,11,opt,name=tag_size_test,json=tagSizeTest" json:"tag_size_test,omitempty"`
	FloatField          *google_protobuf1.FloatValue  `protobuf:"bytes,12,opt,name=float_field,json=floatField" json:"float_field,omitempty"`
	DoubleField         *google_protobuf1.DoubleValue `protobuf:"bytes,13,opt,name=double_field,json=doubleField" json:"double_field,omitempty"`
	// Limited support for DB type 'time', implemented via strings (string -> DB && DB -> string)
	TimeOnly  *gorm_types.TimeOnly        `protobuf:"bytes,14,opt,name=time_only,json=timeOnly" json:"time_only,omitempty"`
	DeletedAt *google_protobuf3.Timestamp `protobuf:"bytes,15,opt,name=deleted_at,json=deletedAt" json:"deleted_at,omitempty"`
}

func (m *TypeWithID) Reset()                    { *m = TypeWithID{} }
func (m *TypeWithID) String() string            { return proto.CompactTextString(m) }
func (*TypeWithID) ProtoMessage()               {}
func (*TypeWithID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TypeWithID) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TypeWithID) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *TypeWithID) GetThings() []*TestTypes {
	if m != nil {
		return m.Things
	}
	return nil
}

func (m *TypeWithID) GetANestedObject() *TestTypes {
	if m != nil {
		return m.ANestedObject
	}
	return nil
}

func (m *TypeWithID) GetPoint() *IntPoint {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *TypeWithID) GetUser() *user.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *TypeWithID) GetAddress() *gorm_types.InetValue {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *TypeWithID) GetMultiaccountTypeIds() []uint32 {
	if m != nil {
		return m.MultiaccountTypeIds
	}
	return nil
}

func (m *TypeWithID) GetSyntheticField() *APIOnlyType {
	if m != nil {
		return m.SyntheticField
	}
	return nil
}

func (m *TypeWithID) GetTagTest() float32 {
	if m != nil {
		return m.TagTest
	}
	return 0
}

func (m *TypeWithID) GetTagSizeTest() string {
	if m != nil {
		return m.TagSizeTest
	}
	return ""
}

func (m *TypeWithID) GetFloatField() *google_protobuf1.FloatValue {
	if m != nil {
		return m.FloatField
	}
	return nil
}

func (m *TypeWithID) GetDoubleField() *google_protobuf1.DoubleValue {
	if m != nil {
		return m.DoubleField
	}
	return nil
}

func (m *TypeWithID) GetTimeOnly() *gorm_types.TimeOnly {
	if m != nil {
		return m.TimeOnly
	}
	return nil
}

func (m *TypeWithID) GetDeletedAt() *google_protobuf3.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

// MultiaccountTypeWithID demonstrates the generated multi-account support
type MultiaccountTypeWithID struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SomeField string `protobuf:"bytes,2,opt,name=some_field,json=someField" json:"some_field,omitempty"`
}

func (m *MultiaccountTypeWithID) Reset()                    { *m = MultiaccountTypeWithID{} }
func (m *MultiaccountTypeWithID) String() string            { return proto.CompactTextString(m) }
func (*MultiaccountTypeWithID) ProtoMessage()               {}
func (*MultiaccountTypeWithID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *MultiaccountTypeWithID) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MultiaccountTypeWithID) GetSomeField() string {
	if m != nil {
		return m.SomeField
	}
	return ""
}

type MultiaccountTypeWithoutID struct {
	SomeField string `protobuf:"bytes,1,opt,name=some_field,json=someField" json:"some_field,omitempty"`
}

func (m *MultiaccountTypeWithoutID) Reset()                    { *m = MultiaccountTypeWithoutID{} }
func (m *MultiaccountTypeWithoutID) String() string            { return proto.CompactTextString(m) }
func (*MultiaccountTypeWithoutID) ProtoMessage()               {}
func (*MultiaccountTypeWithoutID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *MultiaccountTypeWithoutID) GetSomeField() string {
	if m != nil {
		return m.SomeField
	}
	return ""
}

type APIOnlyType struct {
	// here the ormable flag is not used, so nothing will be generated for this
	// object at the ORM level, and when this type is used as a field or
	// repeated field in another message that field will be dropped in the Orm
	// model, and would have to be set by hook
	Contents string `protobuf:"bytes,1,opt,name=contents" json:"contents,omitempty"`
}

func (m *APIOnlyType) Reset()                    { *m = APIOnlyType{} }
func (m *APIOnlyType) String() string            { return proto.CompactTextString(m) }
func (*APIOnlyType) ProtoMessage()               {}
func (*APIOnlyType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *APIOnlyType) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

type PrimaryUUIDType struct {
	Id    *gorm_types.UUIDValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Child *ExternalChild        `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (m *PrimaryUUIDType) Reset()                    { *m = PrimaryUUIDType{} }
func (m *PrimaryUUIDType) String() string            { return proto.CompactTextString(m) }
func (*PrimaryUUIDType) ProtoMessage()               {}
func (*PrimaryUUIDType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *PrimaryUUIDType) GetId() *gorm_types.UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PrimaryUUIDType) GetChild() *ExternalChild {
	if m != nil {
		return m.Child
	}
	return nil
}

type PrimaryStringType struct {
	Id    string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Child *ExternalChild `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
}

func (m *PrimaryStringType) Reset()                    { *m = PrimaryStringType{} }
func (m *PrimaryStringType) String() string            { return proto.CompactTextString(m) }
func (*PrimaryStringType) ProtoMessage()               {}
func (*PrimaryStringType) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *PrimaryStringType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrimaryStringType) GetChild() *ExternalChild {
	if m != nil {
		return m.Child
	}
	return nil
}

type TestTag struct {
	Id           string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TestTagAssoc *TestTagAssociation `protobuf:"bytes,2,opt,name=testTagAssoc" json:"testTagAssoc,omitempty"`
}

func (m *TestTag) Reset()                    { *m = TestTag{} }
func (m *TestTag) String() string            { return proto.CompactTextString(m) }
func (*TestTag) ProtoMessage()               {}
func (*TestTag) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *TestTag) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestTag) GetTestTagAssoc() *TestTagAssociation {
	if m != nil {
		return m.TestTagAssoc
	}
	return nil
}

// replace by default
type TestAssocHandlerDefault struct {
	Id           string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TestTagAssoc []*TestTagAssociation `protobuf:"bytes,2,rep,name=testTagAssoc" json:"testTagAssoc,omitempty"`
}

func (m *TestAssocHandlerDefault) Reset()                    { *m = TestAssocHandlerDefault{} }
func (m *TestAssocHandlerDefault) String() string            { return proto.CompactTextString(m) }
func (*TestAssocHandlerDefault) ProtoMessage()               {}
func (*TestAssocHandlerDefault) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *TestAssocHandlerDefault) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestAssocHandlerDefault) GetTestTagAssoc() []*TestTagAssociation {
	if m != nil {
		return m.TestTagAssoc
	}
	return nil
}

type TestAssocHandlerReplace struct {
	Id           string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TestTagAssoc []*TestTagAssociation `protobuf:"bytes,2,rep,name=testTagAssoc" json:"testTagAssoc,omitempty"`
}

func (m *TestAssocHandlerReplace) Reset()                    { *m = TestAssocHandlerReplace{} }
func (m *TestAssocHandlerReplace) String() string            { return proto.CompactTextString(m) }
func (*TestAssocHandlerReplace) ProtoMessage()               {}
func (*TestAssocHandlerReplace) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *TestAssocHandlerReplace) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestAssocHandlerReplace) GetTestTagAssoc() []*TestTagAssociation {
	if m != nil {
		return m.TestTagAssoc
	}
	return nil
}

type TestAssocHandlerClear struct {
	Id           string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TestTagAssoc []*TestTagAssociation `protobuf:"bytes,2,rep,name=testTagAssoc" json:"testTagAssoc,omitempty"`
}

func (m *TestAssocHandlerClear) Reset()                    { *m = TestAssocHandlerClear{} }
func (m *TestAssocHandlerClear) String() string            { return proto.CompactTextString(m) }
func (*TestAssocHandlerClear) ProtoMessage()               {}
func (*TestAssocHandlerClear) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *TestAssocHandlerClear) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestAssocHandlerClear) GetTestTagAssoc() []*TestTagAssociation {
	if m != nil {
		return m.TestTagAssoc
	}
	return nil
}

type TestAssocHandlerAppend struct {
	Id           string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TestTagAssoc []*TestTagAssociation `protobuf:"bytes,2,rep,name=testTagAssoc" json:"testTagAssoc,omitempty"`
}

func (m *TestAssocHandlerAppend) Reset()                    { *m = TestAssocHandlerAppend{} }
func (m *TestAssocHandlerAppend) String() string            { return proto.CompactTextString(m) }
func (*TestAssocHandlerAppend) ProtoMessage()               {}
func (*TestAssocHandlerAppend) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *TestAssocHandlerAppend) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TestAssocHandlerAppend) GetTestTagAssoc() []*TestTagAssociation {
	if m != nil {
		return m.TestTagAssoc
	}
	return nil
}

type TestTagAssociation struct {
	SomeField string `protobuf:"bytes,1,opt,name=some_field,json=someField" json:"some_field,omitempty"`
}

func (m *TestTagAssociation) Reset()                    { *m = TestTagAssociation{} }
func (m *TestTagAssociation) String() string            { return proto.CompactTextString(m) }
func (*TestTagAssociation) ProtoMessage()               {}
func (*TestTagAssociation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *TestTagAssociation) GetSomeField() string {
	if m != nil {
		return m.SomeField
	}
	return ""
}

type PrimaryIncluded struct {
	Child *ExternalChild `protobuf:"bytes,1,opt,name=child" json:"child,omitempty"`
}

func (m *PrimaryIncluded) Reset()                    { *m = PrimaryIncluded{} }
func (m *PrimaryIncluded) String() string            { return proto.CompactTextString(m) }
func (*PrimaryIncluded) ProtoMessage()               {}
func (*PrimaryIncluded) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *PrimaryIncluded) GetChild() *ExternalChild {
	if m != nil {
		return m.Child
	}
	return nil
}

func init() {
	proto.RegisterType((*TestTypes)(nil), "example.TestTypes")
	proto.RegisterType((*TypeWithID)(nil), "example.TypeWithID")
	proto.RegisterType((*MultiaccountTypeWithID)(nil), "example.MultiaccountTypeWithID")
	proto.RegisterType((*MultiaccountTypeWithoutID)(nil), "example.MultiaccountTypeWithoutID")
	proto.RegisterType((*APIOnlyType)(nil), "example.APIOnlyType")
	proto.RegisterType((*PrimaryUUIDType)(nil), "example.PrimaryUUIDType")
	proto.RegisterType((*PrimaryStringType)(nil), "example.PrimaryStringType")
	proto.RegisterType((*TestTag)(nil), "example.TestTag")
	proto.RegisterType((*TestAssocHandlerDefault)(nil), "example.TestAssocHandlerDefault")
	proto.RegisterType((*TestAssocHandlerReplace)(nil), "example.TestAssocHandlerReplace")
	proto.RegisterType((*TestAssocHandlerClear)(nil), "example.TestAssocHandlerClear")
	proto.RegisterType((*TestAssocHandlerAppend)(nil), "example.TestAssocHandlerAppend")
	proto.RegisterType((*TestTagAssociation)(nil), "example.TestTagAssociation")
	proto.RegisterType((*PrimaryIncluded)(nil), "example.PrimaryIncluded")
	proto.RegisterEnum("example.TestTypesStatus", TestTypesStatus_name, TestTypesStatus_value)
}

func init() { proto.RegisterFile("example/feature_demo/demo_types.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x6d, 0x73, 0xda, 0xc6,
	0x16, 0xb6, 0x78, 0xe7, 0xc8, 0x18, 0x67, 0x6f, 0x5e, 0x04, 0xb9, 0xf7, 0x86, 0x61, 0x9a, 0x86,
	0x7a, 0x1a, 0x98, 0x3a, 0xfd, 0x90, 0x90, 0x76, 0x32, 0x38, 0x24, 0x0d, 0xc9, 0xd4, 0x76, 0x65,
	0xbb, 0xe9, 0xcb, 0x74, 0xd4, 0x45, 0x5a, 0xf0, 0x66, 0xc4, 0xae, 0xaa, 0x5d, 0x35, 0x21, 0xd3,
	0x76, 0xfa, 0xb7, 0xe0, 0x17, 0xf4, 0x6b, 0xff, 0x51, 0x67, 0x57, 0x12, 0xc1, 0x26, 0x4c, 0x9c,
	0x69, 0xbe, 0x60, 0x4b, 0xfb, 0x3c, 0xe7, 0xd9, 0x73, 0xce, 0x73, 0x0e, 0xc0, 0x4d, 0xf2, 0x0a,
	0x4f, 0x02, 0x9f, 0x74, 0x46, 0x04, 0xcb, 0x28, 0x24, 0x8e, 0x47, 0x26, 0xbc, 0xa3, 0x3e, 0x1c,
	0x39, 0x0d, 0x88, 0x68, 0x07, 0x21, 0x97, 0x1c, 0x15, 0x13, 0x58, 0xbd, 0x3b, 0xa6, 0xf2, 0x34,
	0x1a, 0xb6, 0x5d, 0x3e, 0xe9, 0x50, 0x36, 0xe2, 0x43, 0x9f, 0xbf, 0xe2, 0x01, 0x61, 0x1d, 0x8d,
	0x73, 0x6f, 0x8f, 0x09, 0xbb, 0x3d, 0xe6, 0xe1, 0xa4, 0xc3, 0x03, 0x49, 0x39, 0x13, 0x1d, 0xf5,
	0x10, 0x07, 0xa9, 0xdf, 0xbb, 0x28, 0x57, 0x2b, 0x77, 0x96, 0xf4, 0xeb, 0xff, 0x1f, 0x73, 0x3e,
	0xf6, 0x49, 0x8c, 0x1c, 0x46, 0xa3, 0xce, 0xcb, 0x10, 0x07, 0x01, 0x09, 0xd3, 0xf3, 0xeb, 0xe7,
	0xcf, 0xc9, 0x24, 0x90, 0xd3, 0xe4, 0xf0, 0xc6, 0xf9, 0x43, 0x49, 0x27, 0x44, 0x48, 0x3c, 0x09,
	0x12, 0xc0, 0xad, 0xf5, 0x45, 0x10, 0x24, 0xfc, 0x95, 0xba, 0x24, 0x01, 0x3e, 0xb8, 0x68, 0x06,
	0x69, 0xc0, 0x48, 0x90, 0x50, 0x7f, 0x24, 0x01, 0x76, 0xd6, 0x2b, 0x4d, 0x22, 0x5f, 0x52, 0x67,
	0x44, 0xfd, 0x44, 0xac, 0xf9, 0x77, 0x1e, 0xca, 0xc7, 0x44, 0xc8, 0x63, 0x55, 0x07, 0xd4, 0x86,
	0x2a, 0x0e, 0xa8, 0xc3, 0x99, 0x3f, 0x75, 0x84, 0x0c, 0x29, 0x1b, 0x5b, 0x46, 0xc3, 0x68, 0x95,
	0xf7, 0x0a, 0xf3, 0x59, 0x2d, 0xb3, 0x6d, 0xd8, 0x15, 0x1c, 0xd0, 0x03, 0xe6, 0x4f, 0x8f, 0xf4,
	0x21, 0xb2, 0xa0, 0xc8, 0xa2, 0xc9, 0x90, 0x84, 0xc2, 0xca, 0x34, 0xb2, 0xad, 0xbc, 0x9d, 0x3e,
	0xa2, 0x47, 0x50, 0x8d, 0x9b, 0x83, 0xfd, 0x34, 0x52, 0xb6, 0x61, 0xb4, 0xcc, 0xdd, 0xff, 0xb6,
	0xe3, 0x42, 0xb5, 0xd3, 0x42, 0xb5, 0xe3, 0x58, 0xdf, 0x62, 0x3f, 0x22, 0xf6, 0x56, 0x4a, 0x4a,
	0x04, 0xba, 0x60, 0x0e, 0x89, 0xcb, 0x27, 0x44, 0x38, 0x94, 0x49, 0x2b, 0xd7, 0x30, 0x5a, 0x5b,
	0xbb, 0xb5, 0x76, 0x92, 0x60, 0x7b, 0x71, 0xf3, 0xb6, 0x90, 0x58, 0x46, 0xc2, 0x86, 0x04, 0x3d,
	0x60, 0x12, 0xdd, 0x05, 0x93, 0x71, 0x79, 0x4a, 0xd9, 0x98, 0x11, 0x21, 0xac, 0xbc, 0x96, 0xbf,
	0xba, 0x22, 0xff, 0x48, 0x35, 0xd1, 0x5e, 0x86, 0xa2, 0x8f, 0x20, 0x17, 0x45, 0xd4, 0xb3, 0x0a,
	0x9a, 0xb2, 0xdd, 0xd6, 0xf6, 0x8a, 0x9d, 0x72, 0x72, 0x32, 0xe8, 0xdb, 0xfa, 0x14, 0xdd, 0x03,
	0x70, 0x43, 0x82, 0x25, 0xf1, 0x1c, 0x2c, 0xad, 0xa2, 0xc6, 0xd6, 0x57, 0xc2, 0x1f, 0xa7, 0x36,
	0xb0, 0xcb, 0x09, 0xba, 0x27, 0xd1, 0x4d, 0xa8, 0xaa, 0x70, 0xce, 0x4b, 0x2a, 0x4f, 0x1d, 0xea,
	0x39, 0xd4, 0xb3, 0x4a, 0x0d, 0xa3, 0x55, 0xb1, 0x37, 0xd5, 0xeb, 0xe7, 0x54, 0x9e, 0x0e, 0xbc,
	0x81, 0x87, 0x3e, 0x07, 0x78, 0x21, 0x38, 0x73, 0x46, 0x94, 0xf8, 0x9e, 0x55, 0xd6, 0x0a, 0x57,
	0x96, 0x6f, 0xf3, 0xf4, 0xe8, 0x60, 0x3f, 0x2e, 0x5c, 0x59, 0x01, 0x1f, 0x2b, 0x1c, 0xea, 0x42,
	0x85, 0x45, 0xbe, 0x8f, 0x87, 0x3e, 0x71, 0x74, 0x1a, 0xb0, 0x4a, 0x54, 0x69, 0xc4, 0xc4, 0xcd,
	0x14, 0x7b, 0xa2, 0x72, 0xfa, 0x0c, 0xca, 0xca, 0xb7, 0xda, 0x01, 0x96, 0xa9, 0x79, 0x97, 0x97,
	0x79, 0x2a, 0x1b, 0xd5, 0x7f, 0xbb, 0x24, 0x93, 0xff, 0x9a, 0x2d, 0x28, 0xc4, 0xc5, 0x47, 0x26,
	0x14, 0x4f, 0xf6, 0x9f, 0xed, 0x1f, 0x3c, 0xdf, 0xdf, 0xde, 0x40, 0x25, 0xc8, 0x7d, 0x75, 0x70,
	0xd0, 0xdf, 0x36, 0x50, 0x11, 0xb2, 0x7b, 0xbd, 0xfe, 0x76, 0xa6, 0x3b, 0x9a, 0xcf, 0x6a, 0xc3,
	0x92, 0x81, 0x6e, 0x81, 0x19, 0xb7, 0xb7, 0x17, 0x86, 0x78, 0x8a, 0xf2, 0x58, 0xfd, 0x69, 0x5e,
	0x5a, 0xb2, 0xbd, 0x4f, 0x87, 0x9d, 0xe0, 0x17, 0xd4, 0x3a, 0x0b, 0x2c, 0x68, 0xe0, 0xee, 0x5b,
	0x90, 0x75, 0x53, 0x4c, 0x78, 0x38, 0xc6, 0x62, 0xc8, 0x43, 0xaf, 0xf9, 0x57, 0x01, 0xe0, 0x38,
	0xad, 0x63, 0x1f, 0x6d, 0x41, 0x86, 0x7a, 0xda, 0xc7, 0x15, 0x3b, 0x43, 0x3d, 0x74, 0x03, 0x32,
	0x34, 0xb0, 0x32, 0xda, 0xd7, 0xd5, 0xf9, 0xac, 0x66, 0x42, 0x19, 0x8a, 0x34, 0x70, 0xb0, 0xe7,
	0x85, 0x76, 0x86, 0x06, 0x68, 0x07, 0x0a, 0xda, 0x0b, 0xc2, 0xca, 0x36, 0xb2, 0x2d, 0x73, 0x17,
	0xad, 0xfa, 0xcd, 0x4e, 0x10, 0xa8, 0x0b, 0x55, 0xec, 0x30, 0x22, 0x94, 0x0b, 0xf8, 0xf0, 0x05,
	0x71, 0x63, 0x93, 0xbe, 0x9d, 0x54, 0xc1, 0xfb, 0x1a, 0x79, 0xa0, 0x81, 0xa8, 0x03, 0xf9, 0x80,
	0x2b, 0x5b, 0xc7, 0xd6, 0xbc, 0xb4, 0x60, 0x0c, 0x98, 0x3c, 0x54, 0x07, 0xf1, 0xd8, 0x35, 0x37,
	0xec, 0x18, 0x87, 0x3e, 0x86, 0x9c, 0x1a, 0xf3, 0xc4, 0x97, 0xd0, 0xd6, 0x33, 0x7f, 0x22, 0x48,
	0xb8, 0x00, 0xea, 0x73, 0xd4, 0x81, 0xa2, 0x4a, 0x46, 0xb9, 0xbe, 0xb8, 0xda, 0xfb, 0x01, 0x23,
	0x32, 0xee, 0x7d, 0x8a, 0x42, 0x5d, 0xb8, 0xa2, 0x37, 0x03, 0x76, 0x5d, 0x1e, 0x31, 0xa9, 0xb7,
	0xb2, 0x43, 0x3d, 0x61, 0x95, 0x1a, 0xd9, 0x56, 0x65, 0x31, 0xfd, 0xff, 0x59, 0x06, 0xa9, 0x94,
	0x06, 0x9e, 0x40, 0x5f, 0x42, 0x55, 0x4c, 0x99, 0x3c, 0x25, 0x92, 0xba, 0x67, 0x9c, 0x7a, 0x79,
	0x91, 0x4f, 0xef, 0x70, 0xa0, 0xac, 0xa2, 0x18, 0xf6, 0xd6, 0x02, 0x1c, 0xbb, 0x75, 0x07, 0x4a,
	0x12, 0x8f, 0x1d, 0x49, 0x84, 0xd4, 0x46, 0xcd, 0xa4, 0x3d, 0x41, 0xf9, 0x91, 0xcf, 0xb1, 0x6c,
	0x14, 0xec, 0xa2, 0xc4, 0x63, 0x55, 0x44, 0x74, 0x1b, 0x2a, 0x0a, 0x2b, 0xe8, 0x6b, 0x12, 0x13,
	0x4c, 0xdd, 0xc4, 0xf2, 0x7c, 0x56, 0xcb, 0x43, 0xd6, 0xfa, 0x33, 0x67, 0x9b, 0x12, 0x8f, 0x8f,
	0xe8, 0x6b, 0xa2, 0xe1, 0x5f, 0x80, 0xa9, 0x43, 0x24, 0xb7, 0xda, 0xd4, 0xb7, 0xba, 0xbe, 0x32,
	0xa1, 0x8f, 0x15, 0x26, 0x2e, 0x08, 0x68, 0x7c, 0x7c, 0xb1, 0x07, 0xb0, 0xe9, 0xf1, 0x48, 0x0d,
	0x51, 0x4c, 0xaf, 0xac, 0x59, 0x5f, 0x7d, 0x0d, 0x8a, 0xf9, 0x66, 0xcc, 0x88, 0x03, 0x9c, 0x99,
	0xa5, 0xad, 0x8b, 0xcc, 0x92, 0x5a, 0x29, 0x1e, 0xf1, 0x49, 0xb2, 0x52, 0xaa, 0xef, 0x5e, 0x29,
	0x09, 0xba, 0x27, 0xbb, 0xc7, 0xf3, 0x59, 0xed, 0xb0, 0x64, 0xa0, 0x6b, 0x90, 0xa7, 0x4c, 0xde,
	0xd9, 0x45, 0x20, 0x88, 0x1b, 0x12, 0xa9, 0xf6, 0x66, 0x3d, 0x13, 0x18, 0xe8, 0x0e, 0x6c, 0xfe,
	0xf8, 0xd3, 0xce, 0x53, 0x4e, 0xd9, 0xb1, 0x1a, 0x77, 0x14, 0x37, 0xd3, 0x59, 0x6e, 0xb9, 0xa8,
	0x6f, 0xbd, 0xde, 0x7c, 0x33, 0x39, 0x83, 0x7e, 0xf3, 0x1b, 0xb8, 0xfa, 0xf5, 0xb9, 0x9e, 0xaf,
	0x4c, 0x55, 0x4e, 0x4f, 0xd5, 0xff, 0x00, 0x04, 0x9f, 0xa4, 0xc5, 0xd2, 0xd3, 0x65, 0x97, 0xd5,
	0x1b, 0x5d, 0x8c, 0x6e, 0x69, 0x3e, 0xab, 0xe5, 0x4a, 0x46, 0xc3, 0x68, 0xf6, 0xa1, 0xf6, 0xb6,
	0x90, 0x3c, 0x92, 0x83, 0xfe, 0xb9, 0x28, 0xc6, 0xfa, 0x28, 0x9f, 0x80, 0xb9, 0xe4, 0x2a, 0x54,
	0x87, 0x92, 0xcb, 0x99, 0x24, 0x4c, 0x8a, 0x84, 0xb5, 0x78, 0x6e, 0x32, 0xa8, 0x1e, 0x86, 0x74,
	0x82, 0xc3, 0xa9, 0xda, 0x7a, 0x1a, 0x7e, 0x73, 0x71, 0xf9, 0xb5, 0x7b, 0x51, 0xe5, 0xf4, 0x29,
	0xe4, 0xdd, 0x53, 0x9a, 0xa4, 0xa3, 0xbe, 0x3b, 0x52, 0x43, 0x3f, 0x7a, 0x25, 0x49, 0xc8, 0xb0,
	0xff, 0x50, 0x9d, 0xda, 0x31, 0xa8, 0xab, 0xa7, 0xa4, 0x64, 0x34, 0xbf, 0x87, 0x4b, 0x89, 0x5e,
	0xbc, 0xbc, 0xb4, 0xe2, 0x9b, 0x72, 0x95, 0xff, 0x45, 0x68, 0x1f, 0x8a, 0x7a, 0x9b, 0xe0, 0xf1,
	0x4a, 0xc0, 0x01, 0x6c, 0xca, 0xf8, 0xa8, 0x27, 0x04, 0x77, 0x93, 0xb8, 0xd7, 0xcf, 0x6e, 0xa1,
	0xe4, 0x90, 0x62, 0xf5, 0x25, 0xbb, 0xa7, 0xab, 0x59, 0xcf, 0xdc, 0xdd, 0xb0, 0xcf, 0x50, 0x17,
	0x6a, 0xbf, 0xc1, 0x35, 0xc5, 0xd2, 0x2f, 0x9f, 0x60, 0xe6, 0xf9, 0x24, 0xec, 0x93, 0x11, 0x8e,
	0x7c, 0x79, 0x01, 0xf5, 0xec, 0x85, 0xd4, 0x77, 0x32, 0x4f, 0xd6, 0xa9, 0xff, 0xb1, 0xaa, 0x6e,
	0x93, 0xc0, 0xc7, 0xee, 0x6a, 0x31, 0x9f, 0xbd, 0xbf, 0x3a, 0xcc, 0x67, 0xb5, 0xc2, 0x4e, 0xee,
	0xc9, 0xc6, 0xa1, 0xb1, 0x36, 0xfb, 0x2b, 0xe7, 0xf5, 0x1f, 0xfa, 0x04, 0x87, 0x1f, 0x54, 0xfd,
	0xe7, 0x75, 0xea, 0xbf, 0xc3, 0xd5, 0xf3, 0xea, 0xbd, 0x20, 0x20, 0xcc, 0xfb, 0xa0, 0xf2, 0xdf,
	0xad, 0x93, 0xbf, 0x0f, 0x68, 0x95, 0xf7, 0xae, 0xe9, 0x4c, 0xc9, 0x47, 0x8b, 0x81, 0x1b, 0x30,
	0xd7, 0x8f, 0x3c, 0xb2, 0x64, 0x77, 0xe3, 0x22, 0x76, 0x47, 0xf3, 0x59, 0x6d, 0xab, 0x64, 0x20,
	0x80, 0x9c, 0x1a, 0x48, 0x94, 0xa1, 0xde, 0xde, 0xe3, 0x1f, 0xfa, 0xef, 0xfb, 0xbb, 0x78, 0xf9,
	0xe7, 0xef, 0xfd, 0xe4, 0xe5, 0xb0, 0xa0, 0xd1, 0x77, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xd8,
	0xfd, 0x13, 0xbb, 0x94, 0x0c, 0x00, 0x00,
}
