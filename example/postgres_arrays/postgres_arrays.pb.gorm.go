// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: postgres_arrays.proto

/*
Package postgres_arrays is a generated protocol buffer package.

It is generated from these files:
	postgres_arrays.proto

It has these top-level messages:
	Example
*/
package postgres_arrays

import context "context"
import errors "errors"

import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import pq1 "github.com/lib/pq"

import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type ExampleORM struct {
	ArrayOfBools   pq1.BoolArray    `gorm:"type:bool[]"`
	ArrayOfFloat64 pq1.Float64Array `gorm:"type:float[]"`
	ArrayOfInt64   pq1.Int64Array   `gorm:"type:integer[]"`
	ArrayOfString  pq1.StringArray  `gorm:"type:text[]"`
	Description    string
	Id             string `gorm:"type:uuid;primary_key"`
}

// TableName overrides the default tablename generated by GORM
func (ExampleORM) TableName() string {
	return "examples"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Example) ToORM(ctx context.Context) (ExampleORM, error) {
	to := ExampleORM{}
	var err error
	if prehook, ok := interface{}(m).(ExampleWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Description = m.Description
	if m.ArrayOfBools != nil {
		to.ArrayOfBools = make(pq1.BoolArray, len(m.ArrayOfBools))
		copy(to.ArrayOfBools, m.ArrayOfBools)
	}
	if m.ArrayOfFloat64 != nil {
		to.ArrayOfFloat64 = make(pq1.Float64Array, len(m.ArrayOfFloat64))
		copy(to.ArrayOfFloat64, m.ArrayOfFloat64)
	}
	if m.ArrayOfInt64 != nil {
		to.ArrayOfInt64 = make(pq1.Int64Array, len(m.ArrayOfInt64))
		copy(to.ArrayOfInt64, m.ArrayOfInt64)
	}
	if m.ArrayOfString != nil {
		to.ArrayOfString = make(pq1.StringArray, len(m.ArrayOfString))
		copy(to.ArrayOfString, m.ArrayOfString)
	}
	if posthook, ok := interface{}(m).(ExampleWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ExampleORM) ToPB(ctx context.Context) (Example, error) {
	to := Example{}
	var err error
	if prehook, ok := interface{}(m).(ExampleWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Description = m.Description
	if m.ArrayOfBools != nil {
		to.ArrayOfBools = make(pq1.BoolArray, len(m.ArrayOfBools))
		copy(to.ArrayOfBools, m.ArrayOfBools)
	}
	if m.ArrayOfFloat64 != nil {
		to.ArrayOfFloat64 = make(pq1.Float64Array, len(m.ArrayOfFloat64))
		copy(to.ArrayOfFloat64, m.ArrayOfFloat64)
	}
	if m.ArrayOfInt64 != nil {
		to.ArrayOfInt64 = make(pq1.Int64Array, len(m.ArrayOfInt64))
		copy(to.ArrayOfInt64, m.ArrayOfInt64)
	}
	if m.ArrayOfString != nil {
		to.ArrayOfString = make(pq1.StringArray, len(m.ArrayOfString))
		copy(to.ArrayOfString, m.ArrayOfString)
	}
	if posthook, ok := interface{}(m).(ExampleWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Example the arg will be the target, the caller the one being converted from

// ExampleBeforeToORM called before default ToORM code
type ExampleWithBeforeToORM interface {
	BeforeToORM(context.Context, *ExampleORM) error
}

// ExampleAfterToORM called after default ToORM code
type ExampleWithAfterToORM interface {
	AfterToORM(context.Context, *ExampleORM) error
}

// ExampleBeforeToPB called before default ToPB code
type ExampleWithBeforeToPB interface {
	BeforeToPB(context.Context, *Example) error
}

// ExampleAfterToPB called after default ToPB code
type ExampleWithAfterToPB interface {
	AfterToPB(context.Context, *Example) error
}

// DefaultCreateExample executes a basic gorm create call
func DefaultCreateExample(ctx context.Context, in *Example, db *gorm1.DB) (*Example, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultCreateExample")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeCreate); ok {
		if db, err = hook.BeforeCreate(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithAfterCreate); ok {
		if err = hook.AfterCreate(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ExampleORMWithBeforeCreate interface {
	BeforeCreate(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithAfterCreate interface {
	AfterCreate(context.Context, *gorm1.DB) error
}

// DefaultReadExample executes a basic gorm read call
func DefaultReadExample(ctx context.Context, in *Example, db *gorm1.DB) (*Example, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultReadExample")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.New("DefaultReadExample requires a non-zero primary key")
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &ExampleORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := ExampleORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(ExampleORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type ExampleORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteExample(ctx context.Context, in *Example, db *gorm1.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteExample")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.New("A non-zero ID value is required for a delete call")
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeDelete); ok {
		if db, err = hook.BeforeDelete(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&ExampleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithAfterDelete); ok {
		err = hook.AfterDelete(ctx, db)
	}
	return err
}

type ExampleORMWithBeforeDelete interface {
	BeforeDelete(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithAfterDelete interface {
	AfterDelete(context.Context, *gorm1.DB) error
}

func DefaultDeleteExampleSet(ctx context.Context, in []*Example, db *gorm1.DB) error {
	if in == nil {
		return errors.New("Nil argument to DefaultDeleteExampleSet")
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.New("A non-zero ID value is required for a delete call")
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&ExampleORM{})).(ExampleORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&ExampleORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&ExampleORM{})).(ExampleORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type ExampleORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Example, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Example, *gorm1.DB) error
}

// DefaultStrictUpdateExample clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateExample(ctx context.Context, in *Example, db *gorm1.DB) (*Example, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateExample")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type ExampleORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchExample executes a basic gorm update call with patch behavior
func DefaultPatchExample(ctx context.Context, in *Example, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Example, error) {
	if in == nil {
		return nil, errors.New("Nil argument to DefaultPatchExample")
	}
	var pbObj Example
	var err error
	if hook, ok := interface{}(&pbObj).(ExampleWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadExample(ctx, &Example{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(ExampleWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskExample(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(ExampleWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateExample(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(ExampleWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type ExampleWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Example, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Example, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Example, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Example, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultApplyFieldMaskExample patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskExample(ctx context.Context, patchee *Example, patcher *Example, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Example, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.New("Patchee inputs to DefaultApplyFieldMaskExample must be non-nil")
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"ArrayOfBools" {
			patchee.ArrayOfBools = patcher.ArrayOfBools
			continue
		}
		if f == prefix+"ArrayOfFloat64" {
			patchee.ArrayOfFloat64 = patcher.ArrayOfFloat64
			continue
		}
		if f == prefix+"ArrayOfInt64" {
			patchee.ArrayOfInt64 = patcher.ArrayOfInt64
			continue
		}
		if f == prefix+"ArrayOfString" {
			patchee.ArrayOfString = patcher.ArrayOfString
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListExample executes a gorm list call
func DefaultListExample(ctx context.Context, db *gorm1.DB) ([]*Example, error) {
	in := Example{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &ExampleORM{}, &Example{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []ExampleORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ExampleORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Example{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ExampleORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type ExampleORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]ExampleORM) error
}
