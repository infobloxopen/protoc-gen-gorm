// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example/feature_demo/demo_multi_file_service.proto

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import infoblox_api "github.com/infobloxopen/atlas-app-toolkit/query"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReadAccountRequest struct {
	// For a read request, the id field is the only to be specified
	Id     uint64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadAccountRequest) Reset()                    { *m = ReadAccountRequest{} }
func (m *ReadAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadAccountRequest) ProtoMessage()               {}
func (*ReadAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ReadAccountRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReadAccountRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadBlogPostsResponse struct {
	Posts []*BlogPost `protobuf:"bytes,1,rep,name=posts" json:"posts,omitempty"`
}

func (m *ReadBlogPostsResponse) Reset()                    { *m = ReadBlogPostsResponse{} }
func (m *ReadBlogPostsResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadBlogPostsResponse) ProtoMessage()               {}
func (*ReadBlogPostsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ReadBlogPostsResponse) GetPosts() []*BlogPost {
	if m != nil {
		return m.Posts
	}
	return nil
}

func init() {
	proto.RegisterType((*ReadAccountRequest)(nil), "example.ReadAccountRequest")
	proto.RegisterType((*ReadBlogPostsResponse)(nil), "example.ReadBlogPostsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlogPostService service

type BlogPostServiceClient interface {
	Read(ctx context.Context, in *ReadAccountRequest, opts ...grpc.CallOption) (*ReadBlogPostsResponse, error)
}

type blogPostServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlogPostServiceClient(cc *grpc.ClientConn) BlogPostServiceClient {
	return &blogPostServiceClient{cc}
}

func (c *blogPostServiceClient) Read(ctx context.Context, in *ReadAccountRequest, opts ...grpc.CallOption) (*ReadBlogPostsResponse, error) {
	out := new(ReadBlogPostsResponse)
	err := grpc.Invoke(ctx, "/example.BlogPostService/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlogPostService service

type BlogPostServiceServer interface {
	Read(context.Context, *ReadAccountRequest) (*ReadBlogPostsResponse, error)
}

func RegisterBlogPostServiceServer(s *grpc.Server, srv BlogPostServiceServer) {
	s.RegisterService(&_BlogPostService_serviceDesc, srv)
}

func _BlogPostService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.BlogPostService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServiceServer).Read(ctx, req.(*ReadAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlogPostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.BlogPostService",
	HandlerType: (*BlogPostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _BlogPostService_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/feature_demo/demo_multi_file_service.proto",
}

func init() { proto.RegisterFile("example/feature_demo/demo_multi_file_service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xfb, 0x30,
	0x18, 0xc7, 0xe9, 0x7e, 0xfb, 0xcd, 0x91, 0x81, 0x62, 0x41, 0xa8, 0x55, 0x64, 0xec, 0xe2, 0x10,
	0xda, 0x40, 0xf5, 0xa4, 0x17, 0x9d, 0xb2, 0x83, 0x27, 0xe9, 0x6e, 0xbb, 0xd4, 0xac, 0x7d, 0x5a,
	0x83, 0x69, 0x9f, 0x2c, 0x49, 0x65, 0xbe, 0x34, 0x7d, 0x75, 0x92, 0xb5, 0x13, 0x64, 0x0a, 0xbb,
	0x04, 0xf2, 0x7c, 0xff, 0xf0, 0xc9, 0x13, 0x12, 0xc1, 0x8a, 0x95, 0x52, 0x00, 0xcd, 0x81, 0x99,
	0x5a, 0x41, 0x92, 0x41, 0x89, 0xd4, 0x1e, 0x49, 0x59, 0x0b, 0xc3, 0x93, 0x9c, 0x0b, 0x48, 0x34,
	0xa8, 0x37, 0x9e, 0x42, 0x28, 0x15, 0x1a, 0x74, 0xf7, 0xda, 0x8c, 0x7f, 0x5d, 0x70, 0xf3, 0x52,
	0x2f, 0xc2, 0x14, 0x4b, 0xca, 0xab, 0x1c, 0x17, 0x02, 0x57, 0x28, 0xa1, 0xa2, 0x6b, 0x5f, 0x1a,
	0x14, 0x50, 0x05, 0x05, 0xaa, 0x92, 0xa2, 0x34, 0x1c, 0x2b, 0x4d, 0xed, 0xa5, 0x29, 0xf1, 0x1f,
	0xff, 0xca, 0x32, 0x23, 0x98, 0x0e, 0x98, 0x94, 0x81, 0x41, 0x14, 0xaf, 0xdc, 0xd0, 0x65, 0x0d,
	0xea, 0x9d, 0xa6, 0x28, 0x04, 0xa4, 0xb6, 0x27, 0x41, 0x09, 0x8a, 0x19, 0x54, 0xba, 0xed, 0xba,
	0xd8, 0xe5, 0x11, 0x8d, 0x77, 0x34, 0x27, 0x6e, 0x0c, 0x2c, 0xbb, 0x4b, 0x53, 0xac, 0x2b, 0x13,
	0xc3, 0xb2, 0x06, 0x6d, 0xdc, 0x7d, 0xd2, 0xe1, 0x99, 0xe7, 0x0c, 0x9d, 0x71, 0x37, 0xee, 0xf0,
	0xcc, 0xbd, 0x22, 0xbd, 0x9c, 0x83, 0xc8, 0xb4, 0xd7, 0x19, 0x3a, 0xe3, 0x41, 0x74, 0x1a, 0x6e,
	0x18, 0x43, 0x26, 0x79, 0x38, 0xb5, 0xda, 0x0c, 0x5a, 0x9e, 0xb8, 0xf5, 0x8e, 0x6e, 0xc9, 0x91,
	0xed, 0x9e, 0x08, 0x2c, 0x9e, 0x50, 0x1b, 0x1d, 0x83, 0x96, 0x58, 0x69, 0x70, 0xcf, 0xc9, 0x7f,
	0x69, 0x07, 0x9e, 0x33, 0xfc, 0x37, 0x1e, 0x44, 0x87, 0x61, 0x0b, 0x1c, 0x6e, 0xac, 0x71, 0xa3,
	0x47, 0xcf, 0xe4, 0x60, 0x33, 0x9a, 0x35, 0x3b, 0x77, 0xef, 0x49, 0xd7, 0x96, 0xba, 0x27, 0xdf,
	0xa1, 0x6d, 0x7e, 0xff, 0xec, 0x87, 0xb8, 0x05, 0xe0, 0xf7, 0x3f, 0x3f, 0x8e, 0xbb, 0x7d, 0xc7,
	0x73, 0x26, 0xd3, 0xf9, 0xc3, 0xae, 0xbf, 0xf6, 0xdb, 0x56, 0x6f, 0xda, 0xe1, 0xa2, 0xb7, 0x76,
	0x5f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x93, 0x39, 0x2e, 0x14, 0x41, 0x02, 0x00, 0x00,
}
