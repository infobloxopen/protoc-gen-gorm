// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntPointServiceClient is the client API for IntPointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntPointServiceClient interface {
	// The convention requires the rpc names have Create/Read/Update/List/Delete
	// as a prefix. The type is inferred from the response (except for delete),
	// so multiple objects can have CURDL handlers in the same service, provided
	// they are given unique suffixes
	Create(ctx context.Context, in *CreateIntPointRequest, opts ...grpc.CallOption) (*CreateIntPointResponse, error)
	Read(ctx context.Context, in *ReadIntPointRequest, opts ...grpc.CallOption) (*ReadIntPointResponse, error)
	Update(ctx context.Context, in *UpdateIntPointRequest, opts ...grpc.CallOption) (*UpdateIntPointResponse, error)
	UpdateSet(ctx context.Context, in *UpdateSetIntPointRequest, opts ...grpc.CallOption) (*UpdateSetIntPointResponse, error)
	List(ctx context.Context, in *ListIntPointRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error)
	ListSomething(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSomethingResponse, error)
	Delete(ctx context.Context, in *DeleteIntPointRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error)
	// CustomMethod can't be autogenerated as it matches no conventions, it will
	// become a stub
	CustomMethod(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateSomething also doesn't match conventions and will become a stub
	CreateSomething(ctx context.Context, in *Something, opts ...grpc.CallOption) (*Something, error)
}

type intPointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntPointServiceClient(cc grpc.ClientConnInterface) IntPointServiceClient {
	return &intPointServiceClient{cc}
}

func (c *intPointServiceClient) Create(ctx context.Context, in *CreateIntPointRequest, opts ...grpc.CallOption) (*CreateIntPointResponse, error) {
	out := new(CreateIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceClient) Read(ctx context.Context, in *ReadIntPointRequest, opts ...grpc.CallOption) (*ReadIntPointResponse, error) {
	out := new(ReadIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceClient) Update(ctx context.Context, in *UpdateIntPointRequest, opts ...grpc.CallOption) (*UpdateIntPointResponse, error) {
	out := new(UpdateIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceClient) UpdateSet(ctx context.Context, in *UpdateSetIntPointRequest, opts ...grpc.CallOption) (*UpdateSetIntPointResponse, error) {
	out := new(UpdateSetIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointService/UpdateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceClient) List(ctx context.Context, in *ListIntPointRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error) {
	out := new(ListIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceClient) ListSomething(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSomethingResponse, error) {
	out := new(ListSomethingResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointService/ListSomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceClient) Delete(ctx context.Context, in *DeleteIntPointRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error) {
	out := new(DeleteIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceClient) CustomMethod(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/example.IntPointService/CustomMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceClient) CreateSomething(ctx context.Context, in *Something, opts ...grpc.CallOption) (*Something, error) {
	out := new(Something)
	err := c.cc.Invoke(ctx, "/example.IntPointService/CreateSomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntPointServiceServer is the server API for IntPointService service.
// All implementations must embed UnimplementedIntPointServiceServer
// for forward compatibility
type IntPointServiceServer interface {
	// The convention requires the rpc names have Create/Read/Update/List/Delete
	// as a prefix. The type is inferred from the response (except for delete),
	// so multiple objects can have CURDL handlers in the same service, provided
	// they are given unique suffixes
	Create(context.Context, *CreateIntPointRequest) (*CreateIntPointResponse, error)
	Read(context.Context, *ReadIntPointRequest) (*ReadIntPointResponse, error)
	Update(context.Context, *UpdateIntPointRequest) (*UpdateIntPointResponse, error)
	UpdateSet(context.Context, *UpdateSetIntPointRequest) (*UpdateSetIntPointResponse, error)
	List(context.Context, *ListIntPointRequest) (*ListIntPointResponse, error)
	ListSomething(context.Context, *emptypb.Empty) (*ListSomethingResponse, error)
	Delete(context.Context, *DeleteIntPointRequest) (*DeleteIntPointResponse, error)
	// CustomMethod can't be autogenerated as it matches no conventions, it will
	// become a stub
	CustomMethod(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// CreateSomething also doesn't match conventions and will become a stub
	CreateSomething(context.Context, *Something) (*Something, error)
	mustEmbedUnimplementedIntPointServiceServer()
}

// UnimplementedIntPointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntPointServiceServer struct {
}

func (UnimplementedIntPointServiceServer) Create(context.Context, *CreateIntPointRequest) (*CreateIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIntPointServiceServer) Read(context.Context, *ReadIntPointRequest) (*ReadIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedIntPointServiceServer) Update(context.Context, *UpdateIntPointRequest) (*UpdateIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIntPointServiceServer) UpdateSet(context.Context, *UpdateSetIntPointRequest) (*UpdateSetIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSet not implemented")
}
func (UnimplementedIntPointServiceServer) List(context.Context, *ListIntPointRequest) (*ListIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntPointServiceServer) ListSomething(context.Context, *emptypb.Empty) (*ListSomethingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSomething not implemented")
}
func (UnimplementedIntPointServiceServer) Delete(context.Context, *DeleteIntPointRequest) (*DeleteIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIntPointServiceServer) CustomMethod(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomMethod not implemented")
}
func (UnimplementedIntPointServiceServer) CreateSomething(context.Context, *Something) (*Something, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSomething not implemented")
}
func (UnimplementedIntPointServiceServer) mustEmbedUnimplementedIntPointServiceServer() {}

// UnsafeIntPointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntPointServiceServer will
// result in compilation errors.
type UnsafeIntPointServiceServer interface {
	mustEmbedUnimplementedIntPointServiceServer()
}

func RegisterIntPointServiceServer(s grpc.ServiceRegistrar, srv IntPointServiceServer) {
	s.RegisterService(&IntPointService_ServiceDesc, srv)
}

func _IntPointService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).Create(ctx, req.(*CreateIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).Read(ctx, req.(*ReadIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).Update(ctx, req.(*UpdateIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointService_UpdateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSetIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).UpdateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/UpdateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).UpdateSet(ctx, req.(*UpdateSetIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).List(ctx, req.(*ListIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointService_ListSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).ListSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/ListSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).ListSomething(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).Delete(ctx, req.(*DeleteIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointService_CustomMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).CustomMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/CustomMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).CustomMethod(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointService_CreateSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Something)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceServer).CreateSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointService/CreateSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceServer).CreateSomething(ctx, req.(*Something))
	}
	return interceptor(ctx, in, info, handler)
}

// IntPointService_ServiceDesc is the grpc.ServiceDesc for IntPointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntPointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.IntPointService",
	HandlerType: (*IntPointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IntPointService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _IntPointService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IntPointService_Update_Handler,
		},
		{
			MethodName: "UpdateSet",
			Handler:    _IntPointService_UpdateSet_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IntPointService_List_Handler,
		},
		{
			MethodName: "ListSomething",
			Handler:    _IntPointService_ListSomething_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IntPointService_Delete_Handler,
		},
		{
			MethodName: "CustomMethod",
			Handler:    _IntPointService_CustomMethod_Handler,
		},
		{
			MethodName: "CreateSomething",
			Handler:    _IntPointService_CreateSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature_demo/demo_service.proto",
}

// IntPointServiceBClient is the client API for IntPointServiceB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntPointServiceBClient interface {
	List(ctx context.Context, in *ListFooRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error)
	Create(ctx context.Context, in *CreateFooRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error)
}

type intPointServiceBClient struct {
	cc grpc.ClientConnInterface
}

func NewIntPointServiceBClient(cc grpc.ClientConnInterface) IntPointServiceBClient {
	return &intPointServiceBClient{cc}
}

func (c *intPointServiceBClient) List(ctx context.Context, in *ListFooRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error) {
	out := new(ListIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointServiceB/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointServiceBClient) Create(ctx context.Context, in *CreateFooRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error) {
	out := new(ListIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointServiceB/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntPointServiceBServer is the server API for IntPointServiceB service.
// All implementations must embed UnimplementedIntPointServiceBServer
// for forward compatibility
type IntPointServiceBServer interface {
	List(context.Context, *ListFooRequest) (*ListIntPointResponse, error)
	Create(context.Context, *CreateFooRequest) (*ListIntPointResponse, error)
	mustEmbedUnimplementedIntPointServiceBServer()
}

// UnimplementedIntPointServiceBServer must be embedded to have forward compatible implementations.
type UnimplementedIntPointServiceBServer struct {
}

func (UnimplementedIntPointServiceBServer) List(context.Context, *ListFooRequest) (*ListIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntPointServiceBServer) Create(context.Context, *CreateFooRequest) (*ListIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIntPointServiceBServer) mustEmbedUnimplementedIntPointServiceBServer() {}

// UnsafeIntPointServiceBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntPointServiceBServer will
// result in compilation errors.
type UnsafeIntPointServiceBServer interface {
	mustEmbedUnimplementedIntPointServiceBServer()
}

func RegisterIntPointServiceBServer(s grpc.ServiceRegistrar, srv IntPointServiceBServer) {
	s.RegisterService(&IntPointServiceB_ServiceDesc, srv)
}

func _IntPointServiceB_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceBServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointServiceB/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceBServer).List(ctx, req.(*ListFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointServiceB_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointServiceBServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointServiceB/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointServiceBServer).Create(ctx, req.(*CreateFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntPointServiceB_ServiceDesc is the grpc.ServiceDesc for IntPointServiceB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntPointServiceB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.IntPointServiceB",
	HandlerType: (*IntPointServiceBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _IntPointServiceB_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _IntPointServiceB_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature_demo/demo_service.proto",
}

// IntPointTxnClient is the client API for IntPointTxn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntPointTxnClient interface {
	// The convention requires the rpc names have Create/Read/Update/List/Delete
	// as a prefix. The type is inferred from the response (except for delete),
	// so multiple objects can have CURDL handlers in the same service, provided
	// they are given unique suffixes
	Create(ctx context.Context, in *CreateIntPointRequest, opts ...grpc.CallOption) (*CreateIntPointResponse, error)
	Read(ctx context.Context, in *ReadIntPointRequest, opts ...grpc.CallOption) (*ReadIntPointResponse, error)
	Update(ctx context.Context, in *UpdateIntPointRequest, opts ...grpc.CallOption) (*UpdateIntPointResponse, error)
	List(ctx context.Context, in *ListIntPointRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error)
	Delete(ctx context.Context, in *DeleteIntPointRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error)
	DeleteSet(ctx context.Context, in *DeleteIntPointsRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error)
	// CustomMethod can't be autogenerated as it matches no conventions, it will
	// become a stub
	CustomMethod(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateSomething also doesn't match conventions and will become a stub
	CreateSomething(ctx context.Context, in *Something, opts ...grpc.CallOption) (*Something, error)
}

type intPointTxnClient struct {
	cc grpc.ClientConnInterface
}

func NewIntPointTxnClient(cc grpc.ClientConnInterface) IntPointTxnClient {
	return &intPointTxnClient{cc}
}

func (c *intPointTxnClient) Create(ctx context.Context, in *CreateIntPointRequest, opts ...grpc.CallOption) (*CreateIntPointResponse, error) {
	out := new(CreateIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointTxn/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnClient) Read(ctx context.Context, in *ReadIntPointRequest, opts ...grpc.CallOption) (*ReadIntPointResponse, error) {
	out := new(ReadIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointTxn/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnClient) Update(ctx context.Context, in *UpdateIntPointRequest, opts ...grpc.CallOption) (*UpdateIntPointResponse, error) {
	out := new(UpdateIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointTxn/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnClient) List(ctx context.Context, in *ListIntPointRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error) {
	out := new(ListIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointTxn/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnClient) Delete(ctx context.Context, in *DeleteIntPointRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error) {
	out := new(DeleteIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointTxn/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnClient) DeleteSet(ctx context.Context, in *DeleteIntPointsRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error) {
	out := new(DeleteIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.IntPointTxn/DeleteSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnClient) CustomMethod(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/example.IntPointTxn/CustomMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intPointTxnClient) CreateSomething(ctx context.Context, in *Something, opts ...grpc.CallOption) (*Something, error) {
	out := new(Something)
	err := c.cc.Invoke(ctx, "/example.IntPointTxn/CreateSomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntPointTxnServer is the server API for IntPointTxn service.
// All implementations must embed UnimplementedIntPointTxnServer
// for forward compatibility
type IntPointTxnServer interface {
	// The convention requires the rpc names have Create/Read/Update/List/Delete
	// as a prefix. The type is inferred from the response (except for delete),
	// so multiple objects can have CURDL handlers in the same service, provided
	// they are given unique suffixes
	Create(context.Context, *CreateIntPointRequest) (*CreateIntPointResponse, error)
	Read(context.Context, *ReadIntPointRequest) (*ReadIntPointResponse, error)
	Update(context.Context, *UpdateIntPointRequest) (*UpdateIntPointResponse, error)
	List(context.Context, *ListIntPointRequest) (*ListIntPointResponse, error)
	Delete(context.Context, *DeleteIntPointRequest) (*DeleteIntPointResponse, error)
	DeleteSet(context.Context, *DeleteIntPointsRequest) (*DeleteIntPointResponse, error)
	// CustomMethod can't be autogenerated as it matches no conventions, it will
	// become a stub
	CustomMethod(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// CreateSomething also doesn't match conventions and will become a stub
	CreateSomething(context.Context, *Something) (*Something, error)
	mustEmbedUnimplementedIntPointTxnServer()
}

// UnimplementedIntPointTxnServer must be embedded to have forward compatible implementations.
type UnimplementedIntPointTxnServer struct {
}

func (UnimplementedIntPointTxnServer) Create(context.Context, *CreateIntPointRequest) (*CreateIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIntPointTxnServer) Read(context.Context, *ReadIntPointRequest) (*ReadIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedIntPointTxnServer) Update(context.Context, *UpdateIntPointRequest) (*UpdateIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIntPointTxnServer) List(context.Context, *ListIntPointRequest) (*ListIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntPointTxnServer) Delete(context.Context, *DeleteIntPointRequest) (*DeleteIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIntPointTxnServer) DeleteSet(context.Context, *DeleteIntPointsRequest) (*DeleteIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSet not implemented")
}
func (UnimplementedIntPointTxnServer) CustomMethod(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomMethod not implemented")
}
func (UnimplementedIntPointTxnServer) CreateSomething(context.Context, *Something) (*Something, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSomething not implemented")
}
func (UnimplementedIntPointTxnServer) mustEmbedUnimplementedIntPointTxnServer() {}

// UnsafeIntPointTxnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntPointTxnServer will
// result in compilation errors.
type UnsafeIntPointTxnServer interface {
	mustEmbedUnimplementedIntPointTxnServer()
}

func RegisterIntPointTxnServer(s grpc.ServiceRegistrar, srv IntPointTxnServer) {
	s.RegisterService(&IntPointTxn_ServiceDesc, srv)
}

func _IntPointTxn_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointTxnServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointTxn/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointTxnServer).Create(ctx, req.(*CreateIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointTxn_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointTxnServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointTxn/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointTxnServer).Read(ctx, req.(*ReadIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointTxn_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointTxnServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointTxn/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointTxnServer).Update(ctx, req.(*UpdateIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointTxn_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointTxnServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointTxn/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointTxnServer).List(ctx, req.(*ListIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointTxn_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointTxnServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointTxn/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointTxnServer).Delete(ctx, req.(*DeleteIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointTxn_DeleteSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointTxnServer).DeleteSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointTxn/DeleteSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointTxnServer).DeleteSet(ctx, req.(*DeleteIntPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointTxn_CustomMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointTxnServer).CustomMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointTxn/CustomMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointTxnServer).CustomMethod(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntPointTxn_CreateSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Something)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntPointTxnServer).CreateSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.IntPointTxn/CreateSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntPointTxnServer).CreateSomething(ctx, req.(*Something))
	}
	return interceptor(ctx, in, info, handler)
}

// IntPointTxn_ServiceDesc is the grpc.ServiceDesc for IntPointTxn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntPointTxn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.IntPointTxn",
	HandlerType: (*IntPointTxnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IntPointTxn_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _IntPointTxn_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IntPointTxn_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IntPointTxn_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IntPointTxn_Delete_Handler,
		},
		{
			MethodName: "DeleteSet",
			Handler:    _IntPointTxn_DeleteSet_Handler,
		},
		{
			MethodName: "CustomMethod",
			Handler:    _IntPointTxn_CustomMethod_Handler,
		},
		{
			MethodName: "CreateSomething",
			Handler:    _IntPointTxn_CreateSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature_demo/demo_service.proto",
}

// CircleServiceClient is the client API for CircleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CircleServiceClient interface {
	List(ctx context.Context, in *ListCircleRequest, opts ...grpc.CallOption) (*ListCircleResponse, error)
}

type circleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCircleServiceClient(cc grpc.ClientConnInterface) CircleServiceClient {
	return &circleServiceClient{cc}
}

func (c *circleServiceClient) List(ctx context.Context, in *ListCircleRequest, opts ...grpc.CallOption) (*ListCircleResponse, error) {
	out := new(ListCircleResponse)
	err := c.cc.Invoke(ctx, "/example.CircleService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircleServiceServer is the server API for CircleService service.
// All implementations must embed UnimplementedCircleServiceServer
// for forward compatibility
type CircleServiceServer interface {
	List(context.Context, *ListCircleRequest) (*ListCircleResponse, error)
	mustEmbedUnimplementedCircleServiceServer()
}

// UnimplementedCircleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCircleServiceServer struct {
}

func (UnimplementedCircleServiceServer) List(context.Context, *ListCircleRequest) (*ListCircleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCircleServiceServer) mustEmbedUnimplementedCircleServiceServer() {}

// UnsafeCircleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CircleServiceServer will
// result in compilation errors.
type UnsafeCircleServiceServer interface {
	mustEmbedUnimplementedCircleServiceServer()
}

func RegisterCircleServiceServer(s grpc.ServiceRegistrar, srv CircleServiceServer) {
	s.RegisterService(&CircleService_ServiceDesc, srv)
}

func _CircleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCircleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.CircleService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircleServiceServer).List(ctx, req.(*ListCircleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CircleService_ServiceDesc is the grpc.ServiceDesc for CircleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CircleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.CircleService",
	HandlerType: (*CircleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CircleService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature_demo/demo_service.proto",
}

// MultipleMethodsAutoGenClient is the client API for MultipleMethodsAutoGen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultipleMethodsAutoGenClient interface {
	CreateA(ctx context.Context, in *CreateIntPointRequest, opts ...grpc.CallOption) (*CreateIntPointResponse, error)
	CreateB(ctx context.Context, in *CreateIntPointRequest, opts ...grpc.CallOption) (*CreateIntPointResponse, error)
	ReadA(ctx context.Context, in *ReadIntPointRequest, opts ...grpc.CallOption) (*ReadIntPointResponse, error)
	ReadB(ctx context.Context, in *ReadIntPointRequest, opts ...grpc.CallOption) (*ReadIntPointResponse, error)
	UpdateA(ctx context.Context, in *UpdateIntPointRequest, opts ...grpc.CallOption) (*UpdateIntPointResponse, error)
	UpdateB(ctx context.Context, in *UpdateIntPointRequest, opts ...grpc.CallOption) (*UpdateIntPointResponse, error)
	ListA(ctx context.Context, in *ListIntPointRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error)
	ListB(ctx context.Context, in *ListIntPointRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error)
	DeleteA(ctx context.Context, in *DeleteIntPointRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error)
	DeleteB(ctx context.Context, in *DeleteIntPointRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error)
	DeleteSetA(ctx context.Context, in *DeleteIntPointsRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error)
	DeleteSetB(ctx context.Context, in *DeleteIntPointsRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error)
}

type multipleMethodsAutoGenClient struct {
	cc grpc.ClientConnInterface
}

func NewMultipleMethodsAutoGenClient(cc grpc.ClientConnInterface) MultipleMethodsAutoGenClient {
	return &multipleMethodsAutoGenClient{cc}
}

func (c *multipleMethodsAutoGenClient) CreateA(ctx context.Context, in *CreateIntPointRequest, opts ...grpc.CallOption) (*CreateIntPointResponse, error) {
	out := new(CreateIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/CreateA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) CreateB(ctx context.Context, in *CreateIntPointRequest, opts ...grpc.CallOption) (*CreateIntPointResponse, error) {
	out := new(CreateIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/CreateB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) ReadA(ctx context.Context, in *ReadIntPointRequest, opts ...grpc.CallOption) (*ReadIntPointResponse, error) {
	out := new(ReadIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/ReadA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) ReadB(ctx context.Context, in *ReadIntPointRequest, opts ...grpc.CallOption) (*ReadIntPointResponse, error) {
	out := new(ReadIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/ReadB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) UpdateA(ctx context.Context, in *UpdateIntPointRequest, opts ...grpc.CallOption) (*UpdateIntPointResponse, error) {
	out := new(UpdateIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/UpdateA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) UpdateB(ctx context.Context, in *UpdateIntPointRequest, opts ...grpc.CallOption) (*UpdateIntPointResponse, error) {
	out := new(UpdateIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/UpdateB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) ListA(ctx context.Context, in *ListIntPointRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error) {
	out := new(ListIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/ListA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) ListB(ctx context.Context, in *ListIntPointRequest, opts ...grpc.CallOption) (*ListIntPointResponse, error) {
	out := new(ListIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/ListB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) DeleteA(ctx context.Context, in *DeleteIntPointRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error) {
	out := new(DeleteIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/DeleteA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) DeleteB(ctx context.Context, in *DeleteIntPointRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error) {
	out := new(DeleteIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/DeleteB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) DeleteSetA(ctx context.Context, in *DeleteIntPointsRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error) {
	out := new(DeleteIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/DeleteSetA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multipleMethodsAutoGenClient) DeleteSetB(ctx context.Context, in *DeleteIntPointsRequest, opts ...grpc.CallOption) (*DeleteIntPointResponse, error) {
	out := new(DeleteIntPointResponse)
	err := c.cc.Invoke(ctx, "/example.MultipleMethodsAutoGen/DeleteSetB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultipleMethodsAutoGenServer is the server API for MultipleMethodsAutoGen service.
// All implementations must embed UnimplementedMultipleMethodsAutoGenServer
// for forward compatibility
type MultipleMethodsAutoGenServer interface {
	CreateA(context.Context, *CreateIntPointRequest) (*CreateIntPointResponse, error)
	CreateB(context.Context, *CreateIntPointRequest) (*CreateIntPointResponse, error)
	ReadA(context.Context, *ReadIntPointRequest) (*ReadIntPointResponse, error)
	ReadB(context.Context, *ReadIntPointRequest) (*ReadIntPointResponse, error)
	UpdateA(context.Context, *UpdateIntPointRequest) (*UpdateIntPointResponse, error)
	UpdateB(context.Context, *UpdateIntPointRequest) (*UpdateIntPointResponse, error)
	ListA(context.Context, *ListIntPointRequest) (*ListIntPointResponse, error)
	ListB(context.Context, *ListIntPointRequest) (*ListIntPointResponse, error)
	DeleteA(context.Context, *DeleteIntPointRequest) (*DeleteIntPointResponse, error)
	DeleteB(context.Context, *DeleteIntPointRequest) (*DeleteIntPointResponse, error)
	DeleteSetA(context.Context, *DeleteIntPointsRequest) (*DeleteIntPointResponse, error)
	DeleteSetB(context.Context, *DeleteIntPointsRequest) (*DeleteIntPointResponse, error)
	mustEmbedUnimplementedMultipleMethodsAutoGenServer()
}

// UnimplementedMultipleMethodsAutoGenServer must be embedded to have forward compatible implementations.
type UnimplementedMultipleMethodsAutoGenServer struct {
}

func (UnimplementedMultipleMethodsAutoGenServer) CreateA(context.Context, *CreateIntPointRequest) (*CreateIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateA not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) CreateB(context.Context, *CreateIntPointRequest) (*CreateIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateB not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) ReadA(context.Context, *ReadIntPointRequest) (*ReadIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadA not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) ReadB(context.Context, *ReadIntPointRequest) (*ReadIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadB not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) UpdateA(context.Context, *UpdateIntPointRequest) (*UpdateIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateA not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) UpdateB(context.Context, *UpdateIntPointRequest) (*UpdateIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateB not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) ListA(context.Context, *ListIntPointRequest) (*ListIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListA not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) ListB(context.Context, *ListIntPointRequest) (*ListIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListB not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) DeleteA(context.Context, *DeleteIntPointRequest) (*DeleteIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteA not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) DeleteB(context.Context, *DeleteIntPointRequest) (*DeleteIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteB not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) DeleteSetA(context.Context, *DeleteIntPointsRequest) (*DeleteIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSetA not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) DeleteSetB(context.Context, *DeleteIntPointsRequest) (*DeleteIntPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSetB not implemented")
}
func (UnimplementedMultipleMethodsAutoGenServer) mustEmbedUnimplementedMultipleMethodsAutoGenServer() {
}

// UnsafeMultipleMethodsAutoGenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultipleMethodsAutoGenServer will
// result in compilation errors.
type UnsafeMultipleMethodsAutoGenServer interface {
	mustEmbedUnimplementedMultipleMethodsAutoGenServer()
}

func RegisterMultipleMethodsAutoGenServer(s grpc.ServiceRegistrar, srv MultipleMethodsAutoGenServer) {
	s.RegisterService(&MultipleMethodsAutoGen_ServiceDesc, srv)
}

func _MultipleMethodsAutoGen_CreateA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).CreateA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/CreateA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).CreateA(ctx, req.(*CreateIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_CreateB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).CreateB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/CreateB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).CreateB(ctx, req.(*CreateIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_ReadA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).ReadA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/ReadA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).ReadA(ctx, req.(*ReadIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_ReadB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).ReadB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/ReadB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).ReadB(ctx, req.(*ReadIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_UpdateA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).UpdateA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/UpdateA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).UpdateA(ctx, req.(*UpdateIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_UpdateB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).UpdateB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/UpdateB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).UpdateB(ctx, req.(*UpdateIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_ListA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).ListA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/ListA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).ListA(ctx, req.(*ListIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_ListB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).ListB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/ListB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).ListB(ctx, req.(*ListIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_DeleteA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).DeleteA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/DeleteA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).DeleteA(ctx, req.(*DeleteIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_DeleteB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).DeleteB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/DeleteB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).DeleteB(ctx, req.(*DeleteIntPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_DeleteSetA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).DeleteSetA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/DeleteSetA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).DeleteSetA(ctx, req.(*DeleteIntPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultipleMethodsAutoGen_DeleteSetB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleMethodsAutoGenServer).DeleteSetB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.MultipleMethodsAutoGen/DeleteSetB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleMethodsAutoGenServer).DeleteSetB(ctx, req.(*DeleteIntPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultipleMethodsAutoGen_ServiceDesc is the grpc.ServiceDesc for MultipleMethodsAutoGen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultipleMethodsAutoGen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.MultipleMethodsAutoGen",
	HandlerType: (*MultipleMethodsAutoGenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateA",
			Handler:    _MultipleMethodsAutoGen_CreateA_Handler,
		},
		{
			MethodName: "CreateB",
			Handler:    _MultipleMethodsAutoGen_CreateB_Handler,
		},
		{
			MethodName: "ReadA",
			Handler:    _MultipleMethodsAutoGen_ReadA_Handler,
		},
		{
			MethodName: "ReadB",
			Handler:    _MultipleMethodsAutoGen_ReadB_Handler,
		},
		{
			MethodName: "UpdateA",
			Handler:    _MultipleMethodsAutoGen_UpdateA_Handler,
		},
		{
			MethodName: "UpdateB",
			Handler:    _MultipleMethodsAutoGen_UpdateB_Handler,
		},
		{
			MethodName: "ListA",
			Handler:    _MultipleMethodsAutoGen_ListA_Handler,
		},
		{
			MethodName: "ListB",
			Handler:    _MultipleMethodsAutoGen_ListB_Handler,
		},
		{
			MethodName: "DeleteA",
			Handler:    _MultipleMethodsAutoGen_DeleteA_Handler,
		},
		{
			MethodName: "DeleteB",
			Handler:    _MultipleMethodsAutoGen_DeleteB_Handler,
		},
		{
			MethodName: "DeleteSetA",
			Handler:    _MultipleMethodsAutoGen_DeleteSetA_Handler,
		},
		{
			MethodName: "DeleteSetB",
			Handler:    _MultipleMethodsAutoGen_DeleteSetB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature_demo/demo_service.proto",
}
