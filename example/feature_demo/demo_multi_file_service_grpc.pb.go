// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogPostServiceClient is the client API for BlogPostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogPostServiceClient interface {
	Read(ctx context.Context, in *ReadAccountRequest, opts ...grpc.CallOption) (*ReadBlogPostsResponse, error)
}

type blogPostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogPostServiceClient(cc grpc.ClientConnInterface) BlogPostServiceClient {
	return &blogPostServiceClient{cc}
}

func (c *blogPostServiceClient) Read(ctx context.Context, in *ReadAccountRequest, opts ...grpc.CallOption) (*ReadBlogPostsResponse, error) {
	out := new(ReadBlogPostsResponse)
	err := c.cc.Invoke(ctx, "/example.BlogPostService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogPostServiceServer is the server API for BlogPostService service.
// All implementations must embed UnimplementedBlogPostServiceServer
// for forward compatibility
type BlogPostServiceServer interface {
	Read(context.Context, *ReadAccountRequest) (*ReadBlogPostsResponse, error)
	mustEmbedUnimplementedBlogPostServiceServer()
}

// UnimplementedBlogPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogPostServiceServer struct {
}

func (UnimplementedBlogPostServiceServer) Read(context.Context, *ReadAccountRequest) (*ReadBlogPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBlogPostServiceServer) mustEmbedUnimplementedBlogPostServiceServer() {}

// UnsafeBlogPostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogPostServiceServer will
// result in compilation errors.
type UnsafeBlogPostServiceServer interface {
	mustEmbedUnimplementedBlogPostServiceServer()
}

func RegisterBlogPostServiceServer(s grpc.ServiceRegistrar, srv BlogPostServiceServer) {
	s.RegisterService(&BlogPostService_ServiceDesc, srv)
}

func _BlogPostService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.BlogPostService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServiceServer).Read(ctx, req.(*ReadAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogPostService_ServiceDesc is the grpc.ServiceDesc for BlogPostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogPostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.BlogPostService",
	HandlerType: (*BlogPostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _BlogPostService_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature_demo/demo_multi_file_service.proto",
}
