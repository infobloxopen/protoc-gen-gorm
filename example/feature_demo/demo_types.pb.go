// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: feature_demo/demo_types.proto

package example

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/example/postgres_arrays"
	user "github.com/infobloxopen/protoc-gen-gorm/example/user"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enums are mapped to the their underlying numeric value in the db.
// This is practical from an API perspective, but tougher for debugging.
// Strings with validation constraints can be used instead if desired
type TestTypesStatus int32

const (
	TestTypes_UNKNOWN TestTypesStatus = 0
	TestTypes_GOOD    TestTypesStatus = 1
	TestTypes_BAD     TestTypesStatus = 2
)

// Enum value maps for TestTypesStatus.
var (
	TestTypesStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "GOOD",
		2: "BAD",
	}
	TestTypesStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"GOOD":    1,
		"BAD":     2,
	}
)

func (x TestTypesStatus) Enum() *TestTypesStatus {
	p := new(TestTypesStatus)
	*p = x
	return p
}

func (x TestTypesStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestTypesStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_demo_demo_types_proto_enumTypes[0].Descriptor()
}

func (TestTypesStatus) Type() protoreflect.EnumType {
	return &file_feature_demo_demo_types_proto_enumTypes[0]
}

func (x TestTypesStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestTypesStatus.Descriptor instead.
func (TestTypesStatus) EnumDescriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{0, 0}
}

// test_types is a message that includes a representative sample of the
// available types
type TestTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the (gorm.field).drop option allows for setting a field to be API only
	ApiOnlyString string `protobuf:"bytes,1,opt,name=api_only_string,json=apiOnlyString,proto3" json:"api_only_string,omitempty"`
	// repeated raw types are currently unsupported, so this field will be dropped
	// at the ORM level
	Numbers []int32 `protobuf:"varint,2,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
	// a StringValue represents a Nullable string
	OptionalString *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=optional_string,json=optionalString,proto3" json:"optional_string,omitempty"`
	BecomesInt     TestTypesStatus         `protobuf:"varint,4,opt,name=becomes_int,json=becomesInt,proto3,enum=example.TestTypesStatus" json:"becomes_int,omitempty"`
	// The Empty type serves no purpose outside of rpc calls and is dropped
	// automatically from objects
	Nothingness *emptypb.Empty `protobuf:"bytes,5,opt,name=nothingness,proto3" json:"nothingness,omitempty"`
	// The UUID custom type should act like a StringValue at the API level, but is
	// automatically converted to and from a uuid.UUID (github.com/satori/go.uuid)
	Uuid *types.UUID `protobuf:"bytes,6,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Timestamps convert to golang's time.Time type, and created_at and
	// updated_at values are automatically filled by GORM
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Duration convert to golang's time.Duration type.
	Duration *durationpb.Duration `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	// This represents a foreign key to the 'type_with_id' type for associations
	// This could be hidden from the API (or soon autogenerated).
	TypeWithIdId uint32 `protobuf:"varint,9,opt,name=type_with_id_id,json=typeWithIdId,proto3" json:"type_with_id_id,omitempty"`
	// This is an arbitrary JSON string that is marshalled and unmarshalled
	// specially in grpc-gateway as a JSON object
	JsonField *types.JSONValue `protobuf:"bytes,10,opt,name=json_field,json=jsonField,proto3" json:"json_field,omitempty"`
	// The UUIDValue custom type should act like a StringValue at the API level, but is
	// automatically converted to and from a *uuid.UUID (github.com/satori/go.uuid)
	NullableUuid *types.UUIDValue `protobuf:"bytes,11,opt,name=nullable_uuid,json=nullableUuid,proto3" json:"nullable_uuid,omitempty"`
	// The TimeOnly should act as uint32 value at business layer, but is automatically
	// converted to/from string at API and ORM level
	TimeOnly *types.TimeOnly `protobuf:"bytes,12,opt,name=time_only,json=timeOnly,proto3" json:"time_only,omitempty"`
	Bigint   *types.BigInt   `protobuf:"bytes,13,opt,name=bigint,proto3" json:"bigint,omitempty"`
	// Repeated non-ormable objects are currently treated as single entity for
	// purposes of an object's field masking
	SeveralValues []*types.JSONValue `protobuf:"bytes,14,rep,name=several_values,json=severalValues,proto3" json:"several_values,omitempty"`
}

func (x *TestTypes) Reset() {
	*x = TestTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTypes) ProtoMessage() {}

func (x *TestTypes) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTypes.ProtoReflect.Descriptor instead.
func (*TestTypes) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{0}
}

func (x *TestTypes) GetApiOnlyString() string {
	if x != nil {
		return x.ApiOnlyString
	}
	return ""
}

func (x *TestTypes) GetNumbers() []int32 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *TestTypes) GetOptionalString() *wrapperspb.StringValue {
	if x != nil {
		return x.OptionalString
	}
	return nil
}

func (x *TestTypes) GetBecomesInt() TestTypesStatus {
	if x != nil {
		return x.BecomesInt
	}
	return TestTypes_UNKNOWN
}

func (x *TestTypes) GetNothingness() *emptypb.Empty {
	if x != nil {
		return x.Nothingness
	}
	return nil
}

func (x *TestTypes) GetUuid() *types.UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *TestTypes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TestTypes) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TestTypes) GetTypeWithIdId() uint32 {
	if x != nil {
		return x.TypeWithIdId
	}
	return 0
}

func (x *TestTypes) GetJsonField() *types.JSONValue {
	if x != nil {
		return x.JsonField
	}
	return nil
}

func (x *TestTypes) GetNullableUuid() *types.UUIDValue {
	if x != nil {
		return x.NullableUuid
	}
	return nil
}

func (x *TestTypes) GetTimeOnly() *types.TimeOnly {
	if x != nil {
		return x.TimeOnly
	}
	return nil
}

func (x *TestTypes) GetBigint() *types.BigInt {
	if x != nil {
		return x.Bigint
	}
	return nil
}

func (x *TestTypes) GetSeveralValues() []*types.JSONValue {
	if x != nil {
		return x.SeveralValues
	}
	return nil
}

// TypeWithID demonstrates some basic assocation behavior
type TypeWithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// any field named 'id' is assumed by gorm to be the primary key for the
	// object.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The field option also allows arbitrary tag setting, such as informing
	// gorm of a primary key, different column names or different types in the db
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// A default has-many relationship, will error on generation if no FK field,
	// convention {typename}_id, is present. These FK fields will be automatically
	// populated on create and update.
	Things []*TestTypes `protobuf:"bytes,3,rep,name=things,proto3" json:"things,omitempty"`
	// A default has-one relationship, will error as above
	ANestedObject *TestTypes `protobuf:"bytes,4,opt,name=a_nested_object,json=aNestedObject,proto3" json:"a_nested_object,omitempty"`
	// An in-package and cross-package imported type (in-package can use any
	// association type, cross-package is limited to belongs_to and many_to_many)
	Point               *IntPoint               `protobuf:"bytes,5,opt,name=point,proto3" json:"point,omitempty"`
	User                *user.User              `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Address             *types.InetValue        `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	MultiaccountTypeIds []uint32                `protobuf:"varint,8,rep,packed,name=multiaccount_type_ids,json=multiaccountTypeIds,proto3" json:"multiaccount_type_ids,omitempty"`
	SyntheticField      *APIOnlyType            `protobuf:"bytes,9,opt,name=synthetic_field,json=syntheticField,proto3" json:"synthetic_field,omitempty"`
	TagTest             float32                 `protobuf:"fixed32,10,opt,name=tag_test,json=tagTest,proto3" json:"tag_test,omitempty"`
	TagSizeTest         string                  `protobuf:"bytes,11,opt,name=tag_size_test,json=tagSizeTest,proto3" json:"tag_size_test,omitempty"`
	FloatField          *wrapperspb.FloatValue  `protobuf:"bytes,12,opt,name=float_field,json=floatField,proto3" json:"float_field,omitempty"`
	DoubleField         *wrapperspb.DoubleValue `protobuf:"bytes,13,opt,name=double_field,json=doubleField,proto3" json:"double_field,omitempty"`
	// Limited support for DB type 'time', implemented via strings (string -> DB && DB -> string)
	TimeOnly  *types.TimeOnly        `protobuf:"bytes,14,opt,name=time_only,json=timeOnly,proto3" json:"time_only,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TypeWithID) Reset() {
	*x = TypeWithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeWithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeWithID) ProtoMessage() {}

func (x *TypeWithID) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeWithID.ProtoReflect.Descriptor instead.
func (*TypeWithID) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{1}
}

func (x *TypeWithID) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TypeWithID) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TypeWithID) GetThings() []*TestTypes {
	if x != nil {
		return x.Things
	}
	return nil
}

func (x *TypeWithID) GetANestedObject() *TestTypes {
	if x != nil {
		return x.ANestedObject
	}
	return nil
}

func (x *TypeWithID) GetPoint() *IntPoint {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *TypeWithID) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TypeWithID) GetAddress() *types.InetValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TypeWithID) GetMultiaccountTypeIds() []uint32 {
	if x != nil {
		return x.MultiaccountTypeIds
	}
	return nil
}

func (x *TypeWithID) GetSyntheticField() *APIOnlyType {
	if x != nil {
		return x.SyntheticField
	}
	return nil
}

func (x *TypeWithID) GetTagTest() float32 {
	if x != nil {
		return x.TagTest
	}
	return 0
}

func (x *TypeWithID) GetTagSizeTest() string {
	if x != nil {
		return x.TagSizeTest
	}
	return ""
}

func (x *TypeWithID) GetFloatField() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatField
	}
	return nil
}

func (x *TypeWithID) GetDoubleField() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleField
	}
	return nil
}

func (x *TypeWithID) GetTimeOnly() *types.TimeOnly {
	if x != nil {
		return x.TimeOnly
	}
	return nil
}

func (x *TypeWithID) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

// MultiaccountTypeWithID demonstrates the generated multi-account support
type MultiaccountTypeWithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SomeField string `protobuf:"bytes,2,opt,name=some_field,json=someField,proto3" json:"some_field,omitempty"`
}

func (x *MultiaccountTypeWithID) Reset() {
	*x = MultiaccountTypeWithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiaccountTypeWithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiaccountTypeWithID) ProtoMessage() {}

func (x *MultiaccountTypeWithID) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiaccountTypeWithID.ProtoReflect.Descriptor instead.
func (*MultiaccountTypeWithID) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{2}
}

func (x *MultiaccountTypeWithID) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MultiaccountTypeWithID) GetSomeField() string {
	if x != nil {
		return x.SomeField
	}
	return ""
}

type MultiaccountTypeWithoutID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeField string `protobuf:"bytes,1,opt,name=some_field,json=someField,proto3" json:"some_field,omitempty"`
}

func (x *MultiaccountTypeWithoutID) Reset() {
	*x = MultiaccountTypeWithoutID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiaccountTypeWithoutID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiaccountTypeWithoutID) ProtoMessage() {}

func (x *MultiaccountTypeWithoutID) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiaccountTypeWithoutID.ProtoReflect.Descriptor instead.
func (*MultiaccountTypeWithoutID) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{3}
}

func (x *MultiaccountTypeWithoutID) GetSomeField() string {
	if x != nil {
		return x.SomeField
	}
	return ""
}

type APIOnlyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// here the ormable flag is not used, so nothing will be generated for this
	// object at the ORM level, and when this type is used as a field or
	// repeated field in another message that field will be dropped in the Orm
	// model, and would have to be set by hook
	Contents string `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *APIOnlyType) Reset() {
	*x = APIOnlyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIOnlyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIOnlyType) ProtoMessage() {}

func (x *APIOnlyType) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIOnlyType.ProtoReflect.Descriptor instead.
func (*APIOnlyType) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{4}
}

func (x *APIOnlyType) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type PrimaryUUIDType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *types.UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Child *ExternalChild   `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *PrimaryUUIDType) Reset() {
	*x = PrimaryUUIDType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryUUIDType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryUUIDType) ProtoMessage() {}

func (x *PrimaryUUIDType) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryUUIDType.ProtoReflect.Descriptor instead.
func (*PrimaryUUIDType) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{5}
}

func (x *PrimaryUUIDType) GetId() *types.UUIDValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PrimaryUUIDType) GetChild() *ExternalChild {
	if x != nil {
		return x.Child
	}
	return nil
}

type PrimaryStringType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Child *ExternalChild `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *PrimaryStringType) Reset() {
	*x = PrimaryStringType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryStringType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryStringType) ProtoMessage() {}

func (x *PrimaryStringType) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryStringType.ProtoReflect.Descriptor instead.
func (*PrimaryStringType) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{6}
}

func (x *PrimaryStringType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrimaryStringType) GetChild() *ExternalChild {
	if x != nil {
		return x.Child
	}
	return nil
}

type TestTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestTagAssoc *TestTagAssociation `protobuf:"bytes,2,opt,name=testTagAssoc,proto3" json:"testTagAssoc,omitempty"`
}

func (x *TestTag) Reset() {
	*x = TestTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTag) ProtoMessage() {}

func (x *TestTag) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTag.ProtoReflect.Descriptor instead.
func (*TestTag) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{7}
}

func (x *TestTag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestTag) GetTestTagAssoc() *TestTagAssociation {
	if x != nil {
		return x.TestTagAssoc
	}
	return nil
}

// replace by default
type TestAssocHandlerDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestTagAssoc []*TestTagAssociation `protobuf:"bytes,2,rep,name=testTagAssoc,proto3" json:"testTagAssoc,omitempty"`
}

func (x *TestAssocHandlerDefault) Reset() {
	*x = TestAssocHandlerDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAssocHandlerDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAssocHandlerDefault) ProtoMessage() {}

func (x *TestAssocHandlerDefault) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAssocHandlerDefault.ProtoReflect.Descriptor instead.
func (*TestAssocHandlerDefault) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{8}
}

func (x *TestAssocHandlerDefault) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestAssocHandlerDefault) GetTestTagAssoc() []*TestTagAssociation {
	if x != nil {
		return x.TestTagAssoc
	}
	return nil
}

type TestAssocHandlerReplace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestTagAssoc []*TestTagAssociation `protobuf:"bytes,2,rep,name=testTagAssoc,proto3" json:"testTagAssoc,omitempty"`
}

func (x *TestAssocHandlerReplace) Reset() {
	*x = TestAssocHandlerReplace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAssocHandlerReplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAssocHandlerReplace) ProtoMessage() {}

func (x *TestAssocHandlerReplace) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAssocHandlerReplace.ProtoReflect.Descriptor instead.
func (*TestAssocHandlerReplace) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{9}
}

func (x *TestAssocHandlerReplace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestAssocHandlerReplace) GetTestTagAssoc() []*TestTagAssociation {
	if x != nil {
		return x.TestTagAssoc
	}
	return nil
}

type TestAssocHandlerClear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestTagAssoc []*TestTagAssociation `protobuf:"bytes,2,rep,name=testTagAssoc,proto3" json:"testTagAssoc,omitempty"`
}

func (x *TestAssocHandlerClear) Reset() {
	*x = TestAssocHandlerClear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAssocHandlerClear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAssocHandlerClear) ProtoMessage() {}

func (x *TestAssocHandlerClear) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAssocHandlerClear.ProtoReflect.Descriptor instead.
func (*TestAssocHandlerClear) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{10}
}

func (x *TestAssocHandlerClear) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestAssocHandlerClear) GetTestTagAssoc() []*TestTagAssociation {
	if x != nil {
		return x.TestTagAssoc
	}
	return nil
}

type TestAssocHandlerAppend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestTagAssoc []*TestTagAssociation `protobuf:"bytes,2,rep,name=testTagAssoc,proto3" json:"testTagAssoc,omitempty"`
}

func (x *TestAssocHandlerAppend) Reset() {
	*x = TestAssocHandlerAppend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAssocHandlerAppend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAssocHandlerAppend) ProtoMessage() {}

func (x *TestAssocHandlerAppend) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAssocHandlerAppend.ProtoReflect.Descriptor instead.
func (*TestAssocHandlerAppend) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{11}
}

func (x *TestAssocHandlerAppend) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestAssocHandlerAppend) GetTestTagAssoc() []*TestTagAssociation {
	if x != nil {
		return x.TestTagAssoc
	}
	return nil
}

type TestTagAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeField string `protobuf:"bytes,1,opt,name=some_field,json=someField,proto3" json:"some_field,omitempty"`
}

func (x *TestTagAssociation) Reset() {
	*x = TestTagAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestTagAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTagAssociation) ProtoMessage() {}

func (x *TestTagAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTagAssociation.ProtoReflect.Descriptor instead.
func (*TestTagAssociation) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{12}
}

func (x *TestTagAssociation) GetSomeField() string {
	if x != nil {
		return x.SomeField
	}
	return ""
}

type PrimaryIncluded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child *ExternalChild `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *PrimaryIncluded) Reset() {
	*x = PrimaryIncluded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_demo_demo_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryIncluded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryIncluded) ProtoMessage() {}

func (x *PrimaryIncluded) ProtoReflect() protoreflect.Message {
	mi := &file_feature_demo_demo_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryIncluded.ProtoReflect.Descriptor instead.
func (*PrimaryIncluded) Descriptor() ([]byte, []int) {
	return file_feature_demo_demo_types_proto_rawDescGZIP(), []int{13}
}

func (x *PrimaryIncluded) GetChild() *ExternalChild {
	if x != nil {
		return x.Child
	}
	return nil
}

var File_feature_demo_demo_types_proto protoreflect.FileDescriptor

var file_feature_demo_demo_types_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x64,
	0x65, 0x6d, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x64, 0x65, 0x6d, 0x6f,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73,
	0x2f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x06, 0x0a, 0x09, 0x54,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x4f, 0x6e,
	0x6c, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x62, 0x65, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x62, 0x65, 0x63, 0x6f, 0x6d,
	0x65, 0x73, 0x49, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x24, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4a, 0x53, 0x4f, 0x4e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f,
	0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x62, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x62, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x0e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x28, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x41, 0x44, 0x10, 0x02, 0x3a, 0x66, 0xba, 0xb9, 0x19, 0x62, 0x08, 0x01, 0x12,
	0x27, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x05,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x22, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x71, 0x12, 0x28, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x06, 0x61, 0x72, 0x72, 0x61, 0x79, 0x32, 0x22,
	0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x62, 0x2f,
	0x70, 0x71, 0x1a, 0x0b, 0x73, 0x6d, 0x6f, 0x72, 0x67, 0x61, 0x73, 0x62, 0x6f, 0x72, 0x64, 0x22,
	0xc8, 0x06, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0xb9, 0x19, 0x0b,
	0x0a, 0x09, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x2a, 0x0a, 0x06, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x06, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x61,
	0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0d, 0x61, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22,
	0x00, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3a, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x10, 0x01, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a,
	0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x41, 0x50, 0x49, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x08,
	0x74, 0x61, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f,
	0xba, 0xb9, 0x19, 0x0b, 0x0a, 0x09, 0x12, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x06, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x74, 0x61, 0x67, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xba, 0xb9, 0x19, 0x05, 0x0a, 0x03, 0x18, 0x80, 0x04, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x72, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x3a, 0x54, 0xba, 0xb9, 0x19, 0x50, 0x08, 0x01, 0x12, 0x17, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x1a, 0x02, 0x70, 0x01, 0x12, 0x33, 0x0a, 0x0c, 0x5b, 0x5d, 0x2a, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x0e, 0x7a, 0x0c, 0x54, 0x79,
	0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x16, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x3a, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x08, 0x01, 0x20, 0x01, 0x22, 0x44, 0x0a,
	0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x6d, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x08,
	0x01, 0x20, 0x01, 0x22, 0x29, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6e,
	0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x55, 0x49, 0x44, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x59,
	0x0a, 0x11, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x6a, 0x0a, 0x07, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41,
	0x73, 0x73, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x1a, 0x00, 0x52,
	0x0c, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x7a, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x47, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x2a, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0x7c, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x50, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0x7a, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74,
	0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x2a, 0x02, 0x60, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x7b, 0x0a, 0x16, 0x54,
	0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02,
	0x58, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x3b, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x61, 0x67, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x06, 0xba,
	0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x53, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x3a, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x08, 0x01, 0x12, 0x0a,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x02, 0x69, 0x64, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f,
	0x78, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x3b, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feature_demo_demo_types_proto_rawDescOnce sync.Once
	file_feature_demo_demo_types_proto_rawDescData = file_feature_demo_demo_types_proto_rawDesc
)

func file_feature_demo_demo_types_proto_rawDescGZIP() []byte {
	file_feature_demo_demo_types_proto_rawDescOnce.Do(func() {
		file_feature_demo_demo_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_demo_demo_types_proto_rawDescData)
	})
	return file_feature_demo_demo_types_proto_rawDescData
}

var file_feature_demo_demo_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_feature_demo_demo_types_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_feature_demo_demo_types_proto_goTypes = []interface{}{
	(TestTypesStatus)(0),              // 0: example.TestTypes.status
	(*TestTypes)(nil),                 // 1: example.TestTypes
	(*TypeWithID)(nil),                // 2: example.TypeWithID
	(*MultiaccountTypeWithID)(nil),    // 3: example.MultiaccountTypeWithID
	(*MultiaccountTypeWithoutID)(nil), // 4: example.MultiaccountTypeWithoutID
	(*APIOnlyType)(nil),               // 5: example.APIOnlyType
	(*PrimaryUUIDType)(nil),           // 6: example.PrimaryUUIDType
	(*PrimaryStringType)(nil),         // 7: example.PrimaryStringType
	(*TestTag)(nil),                   // 8: example.TestTag
	(*TestAssocHandlerDefault)(nil),   // 9: example.TestAssocHandlerDefault
	(*TestAssocHandlerReplace)(nil),   // 10: example.TestAssocHandlerReplace
	(*TestAssocHandlerClear)(nil),     // 11: example.TestAssocHandlerClear
	(*TestAssocHandlerAppend)(nil),    // 12: example.TestAssocHandlerAppend
	(*TestTagAssociation)(nil),        // 13: example.TestTagAssociation
	(*PrimaryIncluded)(nil),           // 14: example.PrimaryIncluded
	(*wrapperspb.StringValue)(nil),    // 15: google.protobuf.StringValue
	(*emptypb.Empty)(nil),             // 16: google.protobuf.Empty
	(*types.UUID)(nil),                // 17: gorm.types.UUID
	(*timestamppb.Timestamp)(nil),     // 18: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 19: google.protobuf.Duration
	(*types.JSONValue)(nil),           // 20: gorm.types.JSONValue
	(*types.UUIDValue)(nil),           // 21: gorm.types.UUIDValue
	(*types.TimeOnly)(nil),            // 22: gorm.types.TimeOnly
	(*types.BigInt)(nil),              // 23: gorm.types.BigInt
	(*IntPoint)(nil),                  // 24: example.IntPoint
	(*user.User)(nil),                 // 25: user.User
	(*types.InetValue)(nil),           // 26: gorm.types.InetValue
	(*wrapperspb.FloatValue)(nil),     // 27: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil),    // 28: google.protobuf.DoubleValue
	(*ExternalChild)(nil),             // 29: example.ExternalChild
}
var file_feature_demo_demo_types_proto_depIdxs = []int32{
	15, // 0: example.TestTypes.optional_string:type_name -> google.protobuf.StringValue
	0,  // 1: example.TestTypes.becomes_int:type_name -> example.TestTypes.status
	16, // 2: example.TestTypes.nothingness:type_name -> google.protobuf.Empty
	17, // 3: example.TestTypes.uuid:type_name -> gorm.types.UUID
	18, // 4: example.TestTypes.created_at:type_name -> google.protobuf.Timestamp
	19, // 5: example.TestTypes.duration:type_name -> google.protobuf.Duration
	20, // 6: example.TestTypes.json_field:type_name -> gorm.types.JSONValue
	21, // 7: example.TestTypes.nullable_uuid:type_name -> gorm.types.UUIDValue
	22, // 8: example.TestTypes.time_only:type_name -> gorm.types.TimeOnly
	23, // 9: example.TestTypes.bigint:type_name -> gorm.types.BigInt
	20, // 10: example.TestTypes.several_values:type_name -> gorm.types.JSONValue
	1,  // 11: example.TypeWithID.things:type_name -> example.TestTypes
	1,  // 12: example.TypeWithID.a_nested_object:type_name -> example.TestTypes
	24, // 13: example.TypeWithID.point:type_name -> example.IntPoint
	25, // 14: example.TypeWithID.user:type_name -> user.User
	26, // 15: example.TypeWithID.address:type_name -> gorm.types.InetValue
	5,  // 16: example.TypeWithID.synthetic_field:type_name -> example.APIOnlyType
	27, // 17: example.TypeWithID.float_field:type_name -> google.protobuf.FloatValue
	28, // 18: example.TypeWithID.double_field:type_name -> google.protobuf.DoubleValue
	22, // 19: example.TypeWithID.time_only:type_name -> gorm.types.TimeOnly
	18, // 20: example.TypeWithID.deleted_at:type_name -> google.protobuf.Timestamp
	21, // 21: example.PrimaryUUIDType.id:type_name -> gorm.types.UUIDValue
	29, // 22: example.PrimaryUUIDType.child:type_name -> example.ExternalChild
	29, // 23: example.PrimaryStringType.child:type_name -> example.ExternalChild
	13, // 24: example.TestTag.testTagAssoc:type_name -> example.TestTagAssociation
	13, // 25: example.TestAssocHandlerDefault.testTagAssoc:type_name -> example.TestTagAssociation
	13, // 26: example.TestAssocHandlerReplace.testTagAssoc:type_name -> example.TestTagAssociation
	13, // 27: example.TestAssocHandlerClear.testTagAssoc:type_name -> example.TestTagAssociation
	13, // 28: example.TestAssocHandlerAppend.testTagAssoc:type_name -> example.TestTagAssociation
	29, // 29: example.PrimaryIncluded.child:type_name -> example.ExternalChild
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_feature_demo_demo_types_proto_init() }
func file_feature_demo_demo_types_proto_init() {
	if File_feature_demo_demo_types_proto != nil {
		return
	}
	file_feature_demo_demo_service_proto_init()
	file_feature_demo_demo_multi_file_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_feature_demo_demo_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeWithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiaccountTypeWithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiaccountTypeWithoutID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIOnlyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryUUIDType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryStringType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAssocHandlerDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAssocHandlerReplace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAssocHandlerClear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAssocHandlerAppend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestTagAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_demo_demo_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryIncluded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_demo_demo_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feature_demo_demo_types_proto_goTypes,
		DependencyIndexes: file_feature_demo_demo_types_proto_depIdxs,
		EnumInfos:         file_feature_demo_demo_types_proto_enumTypes,
		MessageInfos:      file_feature_demo_demo_types_proto_msgTypes,
	}.Build()
	File_feature_demo_demo_types_proto = out.File
	file_feature_demo_demo_types_proto_rawDesc = nil
	file_feature_demo_demo_types_proto_goTypes = nil
	file_feature_demo_demo_types_proto_depIdxs = nil
}
